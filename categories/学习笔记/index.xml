<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>学习笔记 on 习七</title>
    <link>https://it-boyer.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 学习笔记 on 习七</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 13 Oct 2021 12:30:00 +0800</lastBuildDate><atom:link href="https://it-boyer.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>禅道使用入门</title>
      <link>https://it-boyer.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%A6%85%E9%81%93%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/</link>
      <pubDate>Wed, 13 Oct 2021 12:30:00 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%A6%85%E9%81%93%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/</guid>
      <description>简介 禅道有三个版本:开源版 演示、专业版 演示 、企业版 演示 专业版：禅道专业版使用帮助 性价比 专业版与开源版对比 愿景：禅道项目管理软件是做什么的？ 它</description>
    </item>
    
    <item>
      <title>cashflow现金流游戏教程</title>
      <link>https://it-boyer.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/cashflowgame-%E6%B8%B8%E6%88%8F%E8%A7%84%E5%88%99%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 10 Sep 2021 18:44:00 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/cashflowgame-%E6%B8%B8%E6%88%8F%E8%A7%84%E5%88%99%E4%BB%8B%E7%BB%8D/</guid>
      <description>目的 安装过程 游戏规则 《富爸爸穷爸爸》里的3张图-泽图专题 其他概念 体验游戏 目的 游戏的最终目的是使被动收入（非工资收入）大于总支出。在游戏中体会</description>
    </item>
    
    <item>
      <title>Beancount 常用术语和报表模版</title>
      <link>https://it-boyer.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%90%86%E8%B4%A2%E6%8A%95%E8%B5%84%E6%9C%AF%E8%AF%AD%E5%92%8C%E6%8A%A5%E8%A1%A8/</link>
      <pubDate>Fri, 10 Sep 2021 15:03:00 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%90%86%E8%B4%A2%E6%8A%95%E8%B5%84%E6%9C%AF%E8%AF%AD%E5%92%8C%E6%8A%A5%E8%A1%A8/</guid>
      <description>术语 报表工具 术语 Beancount读记 · GitHub 损益表：Income Statement 将一段时间内所有Income和Expenses类账号相关的transacti</description>
    </item>
    
    <item>
      <title>find-grep-dired在目录中批量替换字符串</title>
      <link>https://it-boyer.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/find-grep-dired/</link>
      <pubDate>Thu, 09 Sep 2021 18:19:00 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/find-grep-dired/</guid>
      <description>目的 学习emacs 中搜索和替换字符串的方法 使用find-grep-dired 在指定的目录中批量替换字符串的操作流程 EmacsWiki: Dired Search And Replace 例如：在文件夹/</description>
    </item>
    
    <item>
      <title>学习elgantt.el</title>
      <link>https://it-boyer.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/elgantt%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Mon, 06 Sep 2021 17:44:00 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/elgantt%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</guid>
      <description>目的 使用 问题 目的 在学习taskjuggler 工具过程中，碰巧一起学习emacs 中绘制甘特图的工具elgantt. 在taskjuggler 实战</description>
    </item>
    
    <item>
      <title>org-mode和google日历同步和相关技巧</title>
      <link>https://it-boyer.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/org-mode%E5%90%8C%E6%AD%A5%E8%B0%B7%E6%AD%8C%E6%97%A5%E5%8E%86%E5%90%8C%E6%AD%A5%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Tue, 24 Aug 2021 00:00:00 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/org-mode%E5%90%8C%E6%AD%A5%E8%B0%B7%E6%AD%8C%E6%97%A5%E5%8E%86%E5%90%8C%E6%AD%A5%E5%AE%9E%E7%8E%B0/</guid>
      <description>目的 在doom上开启google工具 ox-trello和gcal同步协作 目的 通过gtd 提高执行力。相关的技巧工具： org-roam agenda org-gcal 谷歌日历APP创建申</description>
    </item>
    
    <item>
      <title>使用swift版XcodeProj读取和修改项目的build配置</title>
      <link>https://it-boyer.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/xcodeproj%E5%9F%BA%E7%A1%80%E6%96%B9%E6%B3%95%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 20 Aug 2021 18:36:00 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/xcodeproj%E5%9F%BA%E7%A1%80%E6%96%B9%E6%B3%95%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/</guid>
      <description>目的 主要的依赖设置 通过xcodeproj在工程的xxx group下引入xx.h和xx.m文件 通过xcodeproj在工程中引入framwor</description>
    </item>
    
    <item>
      <title>学习创建自己的SPM新增库集合package-collection</title>
      <link>https://it-boyer.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/swift-package-collection%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 20 Aug 2021 14:08:00 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/swift-package-collection%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
      <description>目的 制作 目的 学习swift集成库的管理方法，掌握包集合的制作和使用方法 主要 Swift.org - Package Collections Swift 新闻之 Package Collections 是什么 - SwiftUI自学网站 包集合 主要使用j</description>
    </item>
    
    <item>
      <title>iOS 通知提醒几种展示方式和具体代码配置</title>
      <link>https://it-boyer.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%BF%9C%E7%A8%8B%E9%80%9A%E7%9F%A5%E7%9A%84%E6%B6%88%E6%81%AF%E7%9A%84%E5%B1%95%E7%A4%BA%E6%9D%A1%E4%BB%B6%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Wed, 16 Jun 2021 12:54:00 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%BF%9C%E7%A8%8B%E9%80%9A%E7%9F%A5%E7%9A%84%E6%B6%88%E6%81%AF%E7%9A%84%E5%B1%95%E7%A4%BA%E6%9D%A1%E4%BB%B6%E6%8E%A7%E5%88%B6/</guid>
      <description>State &amp;ldquo;DONE&amp;rdquo; from &amp;ldquo;TODO&amp;rdquo; [2021-06-20 Sun 19:43] 场景描述 ios 通知提醒有三种展示样式：铃声、震动、弹出条。 通知提醒有哪些开关，可以通过几种方式来控制? 开关可以分为两种，系统开关和</description>
    </item>
    
    <item>
      <title>敏捷管理规范</title>
      <link>https://it-boyer.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%8F%E6%8D%B7%E7%AE%A1%E7%90%86%E7%9A%84%E8%A7%84%E8%8C%83%E5%92%8C%E6%89%A7%E8%A1%8C%E5%BB%BA%E8%AE%AE/</link>
      <pubDate>Thu, 13 May 2021 11:44:00 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%8F%E6%8D%B7%E7%AE%A1%E7%90%86%E7%9A%84%E8%A7%84%E8%8C%83%E5%92%8C%E6%89%A7%E8%A1%8C%E5%BB%BA%E8%AE%AE/</guid>
      <description>本敏捷规范是在现有正在运行的敏捷实践上的体系化，重点明确项目过程各阶段的动作细节，让整个团队的敏捷管理动作标准化，提升团队敏捷开发的能力. 笔</description>
    </item>
    
    <item>
      <title>创建单个 swift 可执行文件</title>
      <link>https://it-boyer.github.io/post/old/swift-%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 13 Sep 2020 22:33:34 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift-%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>xcrun/swift 命令工具 第一种 vi test.swift #!/usr/bin/env xcrun swift print(&amp;ldquo;hello&amp;rdquo;) $ chmod 755 test.swift $ ./test.swift 第二种 $ cat &amp;laquo;EOF &amp;gt; script #!/usr/bin/swift print(&amp;ldquo;Hi!&amp;quot;) EOF $ chmod u+x script $ ./script Hi! swift-sh 支持库依赖 安装命令 brew install swift-sh 使用 $ cat &amp;laquo;EOF &amp;gt; script #!/usr/bin/swift sh import PromiseKit // @mxcl ~&amp;gt; 6.5 print(Promise.value(&amp;ldquo;Hi!&amp;quot;)) EOF $ chmod</description>
    </item>
    
    <item>
      <title>总结集成工具使用文档</title>
      <link>https://it-boyer.github.io/post/old/%E4%BD%BF%E7%94%A8fastlane%E9%9B%86%E6%88%90cocopads%E5%92%8Cjazzy%E5%B7%A5%E5%85%B7%E6%8F%90%E9%AB%98%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87/</link>
      <pubDate>Sat, 07 Sep 2019 20:47:00 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E4%BD%BF%E7%94%A8fastlane%E9%9B%86%E6%88%90cocopads%E5%92%8Cjazzy%E5%B7%A5%E5%85%B7%E6%8F%90%E9%AB%98%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87/</guid>
      <description>DONEjazzy工具使用实现基本的文档的生成,并同步到hugo目录中 支持oc/swift文档 swift文档 oc 文档 .jazzy.yaml配置</description>
    </item>
    
    <item>
      <title>ADR和orgmode工具使用</title>
      <link>https://it-boyer.github.io/post/old/adr%E5%92%8Corgmode%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 30 Jul 2019 12:12:32 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/adr%E5%92%8Corgmode%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</guid>
      <description>工具总结</description>
    </item>
    
    <item>
      <title>VIPER设计模式</title>
      <link>https://it-boyer.github.io/post/old/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/viper%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 25 Jul 2019 19:27:00 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/viper%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>类图 流程图</description>
    </item>
    
    <item>
      <title>Guaka快速创建swift命令行CLI的工具</title>
      <link>https://it-boyer.github.io/post/old/macos/guaka%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BAswift%E5%91%BD%E4%BB%A4%E8%A1%8Ccli%E7%9A%84%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Sun, 18 Nov 2018 19:10:49 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/macos/guaka%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BAswift%E5%91%BD%E4%BB%A4%E8%A1%8Ccli%E7%9A%84%E5%B7%A5%E5%85%B7/</guid>
      <description>{% github nsomar Guaka 7d6135f width = 30% %} Guaka介绍 通过 Guaka Framework 来实现 CLI(command-line interface)。 该框架可以快速实现如下的效果： 1 git checkout -v &amp;#34;url&amp;#34; git 就是一个 CLI，checko</description>
    </item>
    
    <item>
      <title>Swift的动态性</title>
      <link>https://it-boyer.github.io/post/old/swift/swift%E7%9A%84%E5%8A%A8%E6%80%81%E6%80%A7/</link>
      <pubDate>Sat, 10 Nov 2018 09:14:55 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/swift%E7%9A%84%E5%8A%A8%E6%80%81%E6%80%A7/</guid>
      <description>Foundation Foundation 框架实现了基于运行时一个特性的两个API： 键值编码 (key-value-coding, KVC) 键值观察 (key-value observing, KVO) KVC 和 KVO 允许我们将 UI 和数据进行绑定，这也是 Rx 以及其他响应式框架实现的基</description>
    </item>
    
    <item>
      <title>swift混编及Framework和静态库的支持</title>
      <link>https://it-boyer.github.io/post/old/swift/swift%E6%B7%B7%E7%BC%96%E5%8F%8Aframework%E5%92%8C%E9%9D%99%E6%80%81%E5%BA%93%E7%9A%84%E6%94%AF%E6%8C%81/</link>
      <pubDate>Wed, 31 Oct 2018 21:19:06 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/swift%E6%B7%B7%E7%BC%96%E5%8F%8Aframework%E5%92%8C%E9%9D%99%E6%80%81%E5%BA%93%E7%9A%84%E6%94%AF%E6%8C%81/</guid>
      <description>swift和OC混编 OC oc调用swift framework/swift静态库 oc静态库调用swift/oc的framework oc静态库调用</description>
    </item>
    
    <item>
      <title>使用Fastlane持续集成开发</title>
      <link>https://it-boyer.github.io/post/old/macos/%E4%BD%BF%E7%94%A8fastlane%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91/</link>
      <pubDate>Wed, 24 Oct 2018 12:45:30 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/macos/%E4%BD%BF%E7%94%A8fastlane%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91/</guid>
      <description>{% github it-boyer width = 30% %} 持续集成 在框架开发中，一个优秀的持续集成环境是至关重要的。CI 可以保证潜在的贡献者在有保障的情况下对代码进行修改，减小了框架的</description>
    </item>
    
    <item>
      <title>cocoapods如何自动化管理项目依赖</title>
      <link>https://it-boyer.github.io/post/old/macos/cocoapods%E5%A6%82%E4%BD%95%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96/</link>
      <pubDate>Tue, 23 Oct 2018 20:29:21 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/macos/cocoapods%E5%A6%82%E4%BD%95%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96/</guid>
      <description>通过介绍项目相关的属性配置，来了解cocoapods如何自动化管理项目依赖的。最后会通过自定义ruby脚本来演示。 cocoapods偶现问题</description>
    </item>
    
    <item>
      <title>将Playground作为项目的单元测试</title>
      <link>https://it-boyer.github.io/post/old/swift/%E5%B0%86playground%E4%BD%9C%E4%B8%BA%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Mon, 22 Oct 2018 16:52:33 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/%E5%B0%86playground%E4%BD%9C%E4%B8%BA%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <description>在Perfect项目中增加playground： 新建Perfect.xcodeproj和PerfectPlayground 新建一个Xcode</description>
    </item>
    
    <item>
      <title>Swift访问REST服务开发TrelloAPI</title>
      <link>https://it-boyer.github.io/post/old/macos/swift%E8%AE%BF%E9%97%AErest%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91trelloapi/</link>
      <pubDate>Mon, 22 Oct 2018 08:30:26 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/macos/swift%E8%AE%BF%E9%97%AErest%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91trelloapi/</guid>
      <description></description>
    </item>
    
    <item>
      <title>fork印象笔记SDK支持pod安装</title>
      <link>https://it-boyer.github.io/post/old/macos/fork%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0sdk%E6%94%AF%E6%8C%81pod%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sun, 21 Oct 2018 00:12:20 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/macos/fork%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0sdk%E6%94%AF%E6%8C%81pod%E5%AE%89%E8%A3%85/</guid>
      <description>{% github it-boyer evernote-sdk-mac fd5da70 width = 30% %} 制作pod支持 fork 并clone代码 1 git clone https://github.com/evernote/evernote-sdk-mac.git 创建pod spec索引文件 1 2 $ cd evernote-sdk-mac $ pod spec create EvernoteSDK https://github.com/it-boyer/evernote-sdk-mac.git 编写配置文件 设置支持的平台，源码目</description>
    </item>
    
    <item>
      <title>CommandLineTool使用pod依赖库开发</title>
      <link>https://it-boyer.github.io/post/old/macos/commandlinetool%E4%BD%BF%E7%94%A8pod%E4%BE%9D%E8%B5%96%E5%BA%93%E5%BC%80%E5%8F%91/</link>
      <pubDate>Tue, 16 Oct 2018 17:08:15 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/macos/commandlinetool%E4%BD%BF%E7%94%A8pod%E4%BE%9D%E8%B5%96%E5%BA%93%E5%BC%80%E5%8F%91/</guid>
      <description>问题 #3707 1 dyld: Library not loaded: @rpath/FilesProvider.framework/Versions/A/FilesProvider 结论：cocoa pods不支持Command Line Tool项目 Cocoapods + Command Line Tool - dyld: Library not loaded: @rpath/Realm.framework/Versions/A/Realm cocoa pods不支持Command Line Tool项</description>
    </item>
    
    <item>
      <title>使用swift开发自己的命令行工具</title>
      <link>https://it-boyer.github.io/post/old/swift/%E4%BD%BF%E7%94%A8swift%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Mon, 15 Oct 2018 19:30:26 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/%E4%BD%BF%E7%94%A8swift%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid>
      <description>{% github it-boyer Panagram_Final 8023350 width = 30% %} Command Line Programs on macOS Tutorial swift编写命令行工具 更新7/21/17:macOS教程上的命令行程序已经更新为Xcode 9和Swift 4。</description>
    </item>
    
    <item>
      <title>Swift直接调用Python函数库</title>
      <link>https://it-boyer.github.io/post/old/swift/swift%E7%9B%B4%E6%8E%A5%E8%B0%83%E7%94%A8python%E5%87%BD%E6%95%B0%E5%BA%93/</link>
      <pubDate>Mon, 15 Oct 2018 17:22:37 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/swift%E7%9B%B4%E6%8E%A5%E8%B0%83%E7%94%A8python%E5%87%BD%E6%95%B0%E5%BA%93/</guid>
      <description>{% github PerfectlySoft Perfect-Python 63589be width = 30% %} Perfect - Python 本项目提供了在Swift服务器应用上直接引用Python 2.7函数库的简便方法。 本项目采用Swift Package Manager 软件包管理器</description>
    </item>
    
    <item>
      <title>Swift调用AppleScript脚本和Shell脚本</title>
      <link>https://it-boyer.github.io/post/old/swift/swift%E8%B0%83%E7%94%A8applescript%E8%84%9A%E6%9C%AC%E5%92%8Cshell%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Mon, 15 Oct 2018 17:22:37 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/swift%E8%B0%83%E7%94%A8applescript%E8%84%9A%E6%9C%AC%E5%92%8Cshell%E8%84%9A%E6%9C%AC/</guid>
      <description>当想让自己的app支持播放，但有没有足够的时间来开发自己的播放器，可以先考虑用mpv播放器来实现相关功能，这是AppleScript作为互通</description>
    </item>
    
    <item>
      <title>了解手机处理器ARM</title>
      <link>https://it-boyer.github.io/post/old/%E5%85%B6%E4%BB%96/%E4%BA%86%E8%A7%A3%E6%89%8B%E6%9C%BA%E5%A4%84%E7%90%86%E5%99%A8arm/</link>
      <pubDate>Mon, 15 Oct 2018 08:04:57 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E5%85%B6%E4%BB%96/%E4%BA%86%E8%A7%A3%E6%89%8B%E6%9C%BA%E5%A4%84%E7%90%86%E5%99%A8arm/</guid>
      <description>Arm处理器，因为其低功耗和小尺寸而闻名，几乎所有的手机处理器都基于arm，其在嵌入式系统中的应用非常广泛，它的性能在同等功耗产品中也很出色</description>
    </item>
    
    <item>
      <title>为Pod的库创建演示文件SwiftPlayground</title>
      <link>https://it-boyer.github.io/post/old/macos/%E4%B8%BApod%E7%9A%84%E5%BA%93%E5%88%9B%E5%BB%BA%E6%BC%94%E7%A4%BA%E6%96%87%E4%BB%B6swiftplayground/</link>
      <pubDate>Fri, 12 Oct 2018 19:56:59 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/macos/%E4%B8%BApod%E7%9A%84%E5%BA%93%E5%88%9B%E5%BB%BA%E6%BC%94%E7%A4%BA%E6%96%87%E4%BB%B6swiftplayground/</guid>
      <description>{% github asmallteapot cocoapods-playgrounds c54b492 width = 30% %} issues 62 在playground中优雅的使用Pod This Could Be Us But You Playing Generates a Swift Playground for any Pod. Installation $ gem install cocoapods-playgrounds Usage CocoaPods To generate a Playground for a specific Pod: 1 $ pod playgrounds Alamofire To generate a Playground for</description>
    </item>
    
    <item>
      <title>在playground中执行异步方法</title>
      <link>https://it-boyer.github.io/post/old/swift/%E5%9C%A8playground%E4%B8%AD%E6%89%A7%E8%A1%8C%E5%BC%82%E6%AD%A5%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 12 Oct 2018 19:56:59 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/%E5%9C%A8playground%E4%B8%AD%E6%89%A7%E8%A1%8C%E5%BC%82%E6%AD%A5%E6%96%B9%E6%B3%95/</guid>
      <description>PLAYGROUND 延时运行引入 Playground 的XCPlayground扩展包框架,其中就包括使 Playground 能延时执行的黑魔法，needsIndefiniteExecution(需</description>
    </item>
    
    <item>
      <title>git-lfs命令工具使用</title>
      <link>https://it-boyer.github.io/post/old/git/git-lfs%E5%91%BD%E4%BB%A4%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 11 Oct 2018 17:58:15 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/git/git-lfs%E5%91%BD%E4%BB%A4%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</guid>
      <description>{% github git-lfs git-lfs 45c4568 width = 30% %} git-lfs官网 LFS其实是git的一个扩展，并没有改变git的工作方式，有点像耍了个小花招，把指定需要lfs管理的文件</description>
    </item>
    
    <item>
      <title>gist命令工具使用</title>
      <link>https://it-boyer.github.io/post/old/git/gist%E5%91%BD%E4%BB%A4%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 11 Oct 2018 17:17:52 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/git/gist%E5%91%BD%E4%BB%A4%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</guid>
      <description>{% github defunkt gist 8d86604 width = 30% %} 按照gist 安装gist 1 brew install gist 创建gist 上传a.rb中的代码段： 1 gist a.rb 上传多个文件a.rb,b.rb,c.rb的代码段</description>
    </item>
    
    <item>
      <title>subtree拆分大的git库到多个独立git库</title>
      <link>https://it-boyer.github.io/post/old/git/subtree%E6%8B%86%E5%88%86%E5%A4%A7%E7%9A%84git%E5%BA%93%E5%88%B0%E5%A4%9A%E4%B8%AA%E7%8B%AC%E7%AB%8Bgit%E5%BA%93/</link>
      <pubDate>Tue, 09 Oct 2018 12:07:55 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/git/subtree%E6%8B%86%E5%88%86%E5%A4%A7%E7%9A%84git%E5%BA%93%E5%88%B0%E5%A4%9A%E4%B8%AA%E7%8B%AC%E7%AB%8Bgit%E5%BA%93/</guid>
      <description>Git 仓库拆拆拆 拆分一个子目录为独立仓库 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 这就是那个大仓库 big-project $ git clone git@github.com:tom/big-project.git $ cd big-project # 把所有 `codes-eiyo` 目录下的相关提交整理为一个新的分</description>
    </item>
    
    <item>
      <title>配置Podfile支持playground导入库</title>
      <link>https://it-boyer.github.io/post/old/macos/%E9%85%8D%E7%BD%AEpodfile%E6%94%AF%E6%8C%81playground%E5%AF%BC%E5%85%A5%E5%BA%93/</link>
      <pubDate>Sat, 06 Oct 2018 14:50:12 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/macos/%E9%85%8D%E7%BD%AEpodfile%E6%94%AF%E6%8C%81playground%E5%AF%BC%E5%85%A5%E5%BA%93/</guid>
      <description>pod支持问题 xcode-playground-with-cocoapods You could use ThisCouldBeUsButYouPlaying or add this to your Podfile xcode7.3.1和cocoapods1.0版本导致playground无法import相关动态库 Rx</description>
    </item>
    
    <item>
      <title>RxSwift应用登录验证</title>
      <link>https://it-boyer.github.io/post/old/%E5%BC%80%E6%BA%90%E5%BA%93/rxswift%E5%BA%94%E7%94%A8%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/</link>
      <pubDate>Thu, 04 Oct 2018 09:04:35 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E5%BC%80%E6%BA%90%E5%BA%93/rxswift%E5%BA%94%E7%94%A8%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/</guid>
      <description>{% github it-boyer SimpleValidation fb7a58b width = 30% %} {% meting &amp;ldquo;0036mZ7Q1pk7st&amp;rdquo; &amp;ldquo;tencent&amp;rdquo; &amp;ldquo;song&amp;rdquo; %} 使用RxSwift的优点 RxSwift的目的是让让数据/事件流和异步任务能够更方便的序列化处理，能够使用swi</description>
    </item>
    
    <item>
      <title>Xcode10新特性</title>
      <link>https://it-boyer.github.io/post/old/xcode/xcode10%E6%96%B0%E7%89%B9%E6%80%A7/</link>
      <pubDate>Tue, 02 Oct 2018 13:18:21 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/xcode/xcode10%E6%96%B0%E7%89%B9%E6%80%A7/</guid>
      <description>Xcode 10 Xcode 10在macOS Mojave的黑暗模式下看起来非常棒，也让你很容易在macOS应用程序中采用新的外观。Xcode 10测试版包括Swif</description>
    </item>
    
    <item>
      <title>SPM搭建Perfect模版服务器</title>
      <link>https://it-boyer.github.io/post/old/macos/spm%E6%90%AD%E5%BB%BAperfect%E6%A8%A1%E7%89%88%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Tue, 02 Oct 2018 11:13:35 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/macos/spm%E6%90%AD%E5%BB%BAperfect%E6%A8%A1%E7%89%88%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>Perfect简介 {% github PerfectlySoft Perfect 60e44e4 width = 30% %} 目前比较流行服务端框架主要有Vapor、Perfect、Kitura和Zewo，他们各有长短，本人这次主</description>
    </item>
    
    <item>
      <title>使用SPM管理依赖库</title>
      <link>https://it-boyer.github.io/post/old/swift/%E4%BD%BF%E7%94%A8spm%E7%AE%A1%E7%90%86%E4%BE%9D%E8%B5%96%E5%BA%93/</link>
      <pubDate>Mon, 01 Oct 2018 23:57:27 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/%E4%BD%BF%E7%94%A8spm%E7%AE%A1%E7%90%86%E4%BE%9D%E8%B5%96%E5%BA%93/</guid>
      <description>概念概述 Package Manager {% github it-boyer PerfectTemplate 20294e56 width = 30% %} Modules模块 在 Swift 中我们使用模块来管理代码，每个模块指定一个命名空间并强制指定模块外哪些部分的代码是可以被</description>
    </item>
    
    <item>
      <title>Swift单文件相关命令行工具</title>
      <link>https://it-boyer.github.io/post/old/swift/swift%E5%8D%95%E6%96%87%E4%BB%B6%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Mon, 01 Oct 2018 21:02:49 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/swift%E5%8D%95%E6%96%87%E4%BB%B6%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid>
      <description>直接用 swift 命令执行 xcrun swift可以直接将一个 .swift文件作为命令行工具的输入，这样里面的代码也会被自动地编译和执行。我们甚至还可以在 .swift 文件</description>
    </item>
    
    <item>
      <title>swift在终端使用LLDB调试</title>
      <link>https://it-boyer.github.io/post/old/swift/swift%E5%9C%A8%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8lldb%E8%B0%83%E8%AF%95/</link>
      <pubDate>Mon, 01 Oct 2018 21:02:49 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/swift%E5%9C%A8%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8lldb%E8%B0%83%E8%AF%95/</guid>
      <description>Using the LLDB Debugger 使用LLDB调试器一步一步地运行Swift程序，通过设置断点调试运行状态。 创建一个名Factorial.swift，定义了一个fac</description>
    </item>
    
    <item>
      <title>SPM相关命令工具</title>
      <link>https://it-boyer.github.io/post/old/swift/spm%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Mon, 01 Oct 2018 14:52:23 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/spm%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E5%B7%A5%E5%85%B7/</guid>
      <description>概念概述 getting-started {% github it-boyer PerfectTemplate 20294e56 width = 30% %} 使用Swift编译系统 Swift 编译系统为编译库、可执行文件和在不同工程之间共享代码提供了基本的约定。 swift 工具 swift package swift package generate-xcodeproj swift</description>
    </item>
    
    <item>
      <title>利用JavaScript构建OSX原生应用</title>
      <link>https://it-boyer.github.io/post/old/macos/%E5%88%A9%E7%94%A8javascript%E6%9E%84%E5%BB%BAosx%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8/</link>
      <pubDate>Sat, 29 Sep 2018 18:35:50 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/macos/%E5%88%A9%E7%94%A8javascript%E6%9E%84%E5%BB%BAosx%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8/</guid>
      <description>利用JavaScript构建OSX应用 Example OS X applications written in JavaScript. JavaScript for Automation Cookbook 廖雪峰的JavaScript教程 W3Cschool javascript教程 JavaScript快</description>
    </item>
    
    <item>
      <title>自定义Xcode支持Vim快捷键</title>
      <link>https://it-boyer.github.io/post/old/xcode/%E8%87%AA%E5%AE%9A%E4%B9%89xcode%E6%94%AF%E6%8C%81vim%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Thu, 20 Sep 2018 21:12:51 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/xcode/%E8%87%AA%E5%AE%9A%E4%B9%89xcode%E6%94%AF%E6%8C%81vim%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>使用了Vim之后，被其强大的文本编辑能力吸引, 于是每天都在寻找 Vim 插件, 试图用 Vim 代替 Xcode 进行日常开发. 直到有一天突然发现, 我想要的就是一个拥有强</description>
    </item>
    
    <item>
      <title>git-log的使用</title>
      <link>https://it-boyer.github.io/post/old/git/git-log%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 05 Sep 2018 15:52:33 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/git/git-log%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>trello 卡片 查看提交历史 来看一个实际的例子，如果要查看 Git 仓库中，2008 年 10 月期间，Junio Hamano 提交的但未合并的测试脚本（位于项目的 t/ 目录下的文件</description>
    </item>
    
    <item>
      <title>Jazzy生成Swift文档工具</title>
      <link>https://it-boyer.github.io/post/old/macos/jazzy%E7%94%9F%E6%88%90swift%E6%96%87%E6%A1%A3%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Wed, 05 Sep 2018 15:52:33 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/macos/jazzy%E7%94%9F%E6%88%90swift%E6%96%87%E6%A1%A3%E5%B7%A5%E5%85%B7/</guid>
      <description>{% github realm jazzy 6932e5e width = 30% %} demo {% github appcoda SwiftDocSample 24c1649 width = 30% %} 使用 Jazzy 产生代码文档 Jazzy 是一款可以为 Swift 和 Objective-C 代码产生具有 Apple 风格的代码文档工具。事实上，Jazzy 会为你创建一</description>
    </item>
    
    <item>
      <title>swift支持的正则（textKit）</title>
      <link>https://it-boyer.github.io/post/old/swift/swift%E6%94%AF%E6%8C%81%E7%9A%84%E6%AD%A3%E5%88%99textkit/</link>
      <pubDate>Wed, 05 Sep 2018 15:52:33 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/swift%E6%94%AF%E6%8C%81%E7%9A%84%E6%AD%A3%E5%88%99textkit/</guid>
      <description>正则表达式语法 iOS开发之详解正则表达式原文：NSRegularExpression Tutorial: Getting Started nshipster文章NSPredicate iOS</description>
    </item>
    
    <item>
      <title>playground运行慢问题解决办法</title>
      <link>https://it-boyer.github.io/post/old/swift/playground%E8%BF%90%E8%A1%8C%E6%85%A2%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link>
      <pubDate>Wed, 05 Sep 2018 11:46:05 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/playground%E8%BF%90%E8%A1%8C%E6%85%A2%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid>
      <description>在升级xcode之后，出现playground无法运行的情况，live view 不显示等问题。</description>
    </item>
    
    <item>
      <title>七个习惯附录一</title>
      <link>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF%E9%99%84%E5%BD%95%E4%B8%80/</link>
      <pubDate>Tue, 04 Sep 2018 19:39:50 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF%E9%99%84%E5%BD%95%E4%B8%80/</guid>
      <description>七个习惯资源 {% github it-boyer 7HabitFiles ab2502a width = 30% %} 下载习惯的评估矫正.pages 下载七个习惯综合评估.numbers 生成markdown表格工具 你的生活中心 配偶</description>
    </item>
    
    <item>
      <title>习惯三要事第一自我管理原则</title>
      <link>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E4%B9%A0%E6%83%AF%E4%B8%89%E8%A6%81%E4%BA%8B%E7%AC%AC%E4%B8%80%E8%87%AA%E6%88%91%E7%AE%A1%E7%90%86%E5%8E%9F%E5%88%99/</link>
      <pubDate>Mon, 03 Sep 2018 15:01:52 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E4%B9%A0%E6%83%AF%E4%B8%89%E8%A6%81%E4%BA%8B%E7%AC%AC%E4%B8%80%E8%87%AA%E6%88%91%E7%AE%A1%E7%90%86%E5%8E%9F%E5%88%99/</guid>
      <description>1）我的时间是怎样度过的 1.很不同意2.不同意3.略不同意4.略微同意5.同意6.很同意 问题 态度 1.我花了很多时间在重要而且需要立刻关注的活</description>
    </item>
    
    <item>
      <title>习惯二以终为始自我领导原则</title>
      <link>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E4%B9%A0%E6%83%AF%E4%BA%8C%E4%BB%A5%E7%BB%88%E4%B8%BA%E5%A7%8B%E8%87%AA%E6%88%91%E9%A2%86%E5%AF%BC%E5%8E%9F%E5%88%99/</link>
      <pubDate>Mon, 03 Sep 2018 14:26:21 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E4%B9%A0%E6%83%AF%E4%BA%8C%E4%BB%A5%E7%BB%88%E4%B8%BA%E5%A7%8B%E8%87%AA%E6%88%91%E9%A2%86%E5%AF%BC%E5%8E%9F%E5%88%99/</guid>
      <description>1）检查你的愿景 现在是时候了，让我们对自己的愿景作一次检查。花一分钟思考下述问题，写下你的想法。 2）制定一份个人使命宣言 为了帮你制定自己的使</description>
    </item>
    
    <item>
      <title>习惯一积极主动个人愿景原则</title>
      <link>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E4%B9%A0%E6%83%AF%E4%B8%80%E7%A7%AF%E6%9E%81%E4%B8%BB%E5%8A%A8%E4%B8%AA%E4%BA%BA%E6%84%BF%E6%99%AF%E5%8E%9F%E5%88%99/</link>
      <pubDate>Mon, 03 Sep 2018 13:53:19 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E4%B9%A0%E6%83%AF%E4%B8%80%E7%A7%AF%E6%9E%81%E4%B8%BB%E5%8A%A8%E4%B8%AA%E4%BA%BA%E6%84%BF%E6%99%AF%E5%8E%9F%E5%88%99/</guid>
      <description>怎么在影响圈内,做到积极主动? 行动建议 花一整天，听听你自己和周围人的语言，你使用“但愿”、“我办不到”、“我不得不”等消极回答的频率有多高？</description>
    </item>
    
    <item>
      <title>七个习惯概论</title>
      <link>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF%E6%A6%82%E8%AE%BA/</link>
      <pubDate>Mon, 03 Sep 2018 10:11:38 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF%E6%A6%82%E8%AE%BA/</guid>
      <description>七个习惯概论 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @startsalt {# 高效能人士 | 低效能人士 习惯一 积极主动。积极主动的人绝不浅尝辄止。他们知道要为自己的抉择负责，|消</description>
    </item>
    
    <item>
      <title>七个习惯题由内而外全面造就自己</title>
      <link>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF%E9%A2%98%E7%94%B1%E5%86%85%E8%80%8C%E5%A4%96%E5%85%A8%E9%9D%A2%E9%80%A0%E5%B0%B1%E8%87%AA%E5%B7%B1/</link>
      <pubDate>Mon, 03 Sep 2018 10:11:38 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF%E9%A2%98%E7%94%B1%E5%86%85%E8%80%8C%E5%A4%96%E5%85%A8%E9%9D%A2%E9%80%A0%E5%B0%B1%E8%87%AA%E5%B7%B1/</guid>
      <description>由内而外全面造就自己 你是否有过这种经验，做出推测时发现自己的判断过于匆忙？请对这种经验加以描述。 1 2 答: 你当时做出的推测是什么？ 1 2 答: 想一</description>
    </item>
    
    <item>
      <title>RxSwift函数响应式开发</title>
      <link>https://it-boyer.github.io/post/old/%E5%BC%80%E6%BA%90%E5%BA%93/rxswift%E5%87%BD%E6%95%B0%E5%93%8D%E5%BA%94%E5%BC%8F%E5%BC%80%E5%8F%91/</link>
      <pubDate>Thu, 23 Aug 2018 09:56:38 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E5%BC%80%E6%BA%90%E5%BA%93/rxswift%E5%87%BD%E6%95%B0%E5%93%8D%E5%BA%94%E5%BC%8F%E5%BC%80%E5%8F%91/</guid>
      <description>{% github beeth0ven RxSwift-Chinese-Documentation cbbc87e width = 30% %} RxSwift学习 RxSwift 中文文档 更多示例 RxExample 中包含许多具有代表性的示例。它们都是很好的学习材料。这里我们取出其中几个示例来展示如</description>
    </item>
    
    <item>
      <title>FSCalendar支持自定义的日历开源库</title>
      <link>https://it-boyer.github.io/post/old/%E5%BC%80%E6%BA%90%E5%BA%93/fscalendar%E6%94%AF%E6%8C%81%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E6%97%A5%E5%8E%86%E5%BC%80%E6%BA%90%E5%BA%93/</link>
      <pubDate>Tue, 17 Jul 2018 17:59:05 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E5%BC%80%E6%BA%90%E5%BA%93/fscalendar%E6%94%AF%E6%8C%81%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E6%97%A5%E5%8E%86%E5%BC%80%E6%BA%90%E5%BA%93/</guid>
      <description>{% github it-boyer FSCalendar 1a026a4c width = 30% %} FSCalendar FSCalendar是一款开源iOS日历控件，支持横向、纵向滑动模式，全屏模式，带有子标题、事件设置等功能。以下是项目截</description>
    </item>
    
    <item>
      <title>高效人士的七个习惯</title>
      <link>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E9%AB%98%E6%95%88%E4%BA%BA%E5%A3%AB%E7%9A%84%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF/</link>
      <pubDate>Tue, 03 Jul 2018 12:30:31 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E9%AB%98%E6%95%88%E4%BA%BA%E5%A3%AB%E7%9A%84%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF/</guid>
      <description>豆瓣导图 豆瓣总结 前言 如何善用本书 第一部分 重新探索自我 第一章 由内而外全面造就自己 第二章 七个习惯——概论 第二部分 个人的成功：从依赖到独立 第三章 习</description>
    </item>
    
    <item>
      <title>程序员跳槽全攻略</title>
      <link>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B7%B3%E6%A7%BD%E5%85%A8%E6%94%BB%E7%95%A5/</link>
      <pubDate>Mon, 02 Jul 2018 19:52:08 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B7%B3%E6%A7%BD%E5%85%A8%E6%94%BB%E7%95%A5/</guid>
      <description></description>
    </item>
    
    <item>
      <title>书都不会读还想成功</title>
      <link>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E4%B9%A6%E9%83%BD%E4%B8%8D%E4%BC%9A%E8%AF%BB%E8%BF%98%E6%83%B3%E6%88%90%E5%8A%9F/</link>
      <pubDate>Mon, 02 Jul 2018 13:59:35 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E4%B9%A6%E9%83%BD%E4%B8%8D%E4%BC%9A%E8%AF%BB%E8%BF%98%E6%83%B3%E6%88%90%E5%8A%9F/</guid>
      <description>处境 人到中年，职场受排挤降级，情场被抛弃不如意，怨天尤人，自怨自艾，却不思进取，死扛着压力勉强养家糊口残喘于世。 心态转折 红皇后的故事：寓意为</description>
    </item>
    
    <item>
      <title>Framework实现使用swift开发</title>
      <link>https://it-boyer.github.io/post/old/swift/framework%E5%AE%9E%E7%8E%B0%E4%BD%BF%E7%94%A8swift%E5%BC%80%E5%8F%91/</link>
      <pubDate>Sat, 23 Jun 2018 16:41:58 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/framework%E5%AE%9E%E7%8E%B0%E4%BD%BF%E7%94%A8swift%E5%BC%80%E5%8F%91/</guid>
      <description>{% github it-boyer JHHomeAPP 813e4b width = 30% %} 在静态库组件中使用swift开发 基于静态库的开发，实现封装静态库/Framework并使用swiftOC混编开发 创建三个角</description>
    </item>
    
    <item>
      <title>使用CocoaPods开发静态库</title>
      <link>https://it-boyer.github.io/post/old/macos/%E4%BD%BF%E7%94%A8cocoapods%E5%BC%80%E5%8F%91%E9%9D%99%E6%80%81%E5%BA%93/</link>
      <pubDate>Thu, 21 Jun 2018 21:37:16 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/macos/%E4%BD%BF%E7%94%A8cocoapods%E5%BC%80%E5%8F%91%E9%9D%99%E6%80%81%E5%BA%93/</guid>
      <description>Cocoapods作为OS X和iOS开发平台的类库管理工具，已经非常完善和强大。通常我们用pod来管理第三方开源类库，但我们也极有可能会开发</description>
    </item>
    
    <item>
      <title>storyboard的几种方式</title>
      <link>https://it-boyer.github.io/post/old/ios/ui/storyboard%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Wed, 20 Jun 2018 14:49:37 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/ios/ui/storyboard%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid>
      <description>通过IB（xib/storyboard）创建View的周期方法 loadView：加载View方法，UI是通过代码绘制时，初始化控制器的视图时</description>
    </item>
    
    <item>
      <title>5个图表解决工作中的12大难题</title>
      <link>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/5%E4%B8%AA%E5%9B%BE%E8%A1%A8%E8%A7%A3%E5%86%B3%E5%B7%A5%E4%BD%9C%E4%B8%AD%E7%9A%8412%E5%A4%A7%E9%9A%BE%E9%A2%98/</link>
      <pubDate>Mon, 11 Jun 2018 19:43:53 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/5%E4%B8%AA%E5%9B%BE%E8%A1%A8%E8%A7%A3%E5%86%B3%E5%B7%A5%E4%BD%9C%E4%B8%AD%E7%9A%8412%E5%A4%A7%E9%9A%BE%E9%A2%98/</guid>
      <description>导图 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 title 图表活用教学 left header 使用5种类型的图表 1. 掌握状况图解法 2. 检讨对策图解法 3. 掌握状况图</description>
    </item>
    
    <item>
      <title>uml活动图常用语法</title>
      <link>https://it-boyer.github.io/post/old/%E5%AF%BC%E5%9B%BE/uml%E6%B4%BB%E5%8A%A8%E5%9B%BE%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Mon, 04 Jun 2018 21:27:15 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E5%AF%BC%E5%9B%BE/uml%E6%B4%BB%E5%8A%A8%E5%9B%BE%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 start :ClickServlet.handleRequest(); :new page; if (Page.onSecurityCheck) then (true) :Page.onInit(); if (isForward?) then (no) :Process controls; if (continue processing?) then (no) stop endif if (isPost?) then (yes) :Page.onPost(); else (no) :Page.onGet(); endif :Page.onRender(); endif else (false) endif if (do redirect?)</description>
    </item>
    
    <item>
      <title>uml用例图常用语法</title>
      <link>https://it-boyer.github.io/post/old/%E5%AF%BC%E5%9B%BE/uml%E7%94%A8%E4%BE%8B%E5%9B%BE%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Mon, 04 Jun 2018 21:20:41 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E5%AF%BC%E5%9B%BE/uml%E7%94%A8%E4%BE%8B%E5%9B%BE%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 :Main Admin: as Admin (Use the application) as (Use) User -&amp;gt; (Start) User --&amp;gt; (Use) Admin ---&amp;gt; (Use) note right of Admin : This is an example. note right of (Use) A note can also be on several lines end note note &amp;#34;This note is connected\nto several objects.&amp;#34; as N2 (Start) .. N2</description>
    </item>
    
    <item>
      <title>uml类图常用语法</title>
      <link>https://it-boyer.github.io/post/old/%E5%AF%BC%E5%9B%BE/uml%E7%B1%BB%E5%9B%BE%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Mon, 04 Jun 2018 20:49:36 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E5%AF%BC%E5%9B%BE/uml%E7%B1%BB%E5%9B%BE%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 class BaseClass namespace net.dummy #DDDDDD { .BaseClass &amp;lt;|-- Person Meeting o-- Person .BaseClass &amp;lt;|- Meeting } namespace net.foo { net.dummy.Person &amp;lt;|- Person .BaseClass &amp;lt;|-- Person net.dummy.Meeting o-- Person } BaseClass &amp;lt;|-- net.unused.Person 效果图： 1 2 3 4 5 6 7 8 9 10 11 12 class BaseClass namespace net.dummy #DDDDDD { .BaseClass &amp;lt;|-- Person Meeting</description>
    </item>
    
    <item>
      <title>高德地图API使用</title>
      <link>https://it-boyer.github.io/post/old/ios/%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BEapi%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 30 May 2018 14:40:56 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/ios/%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BEapi%E4%BD%BF%E7%94%A8/</guid>
      <description>引入头文件 1 2 #import &amp;lt;AMapFoundationKit/AMapFoundationKit.h&amp;gt; #import &amp;lt;AMapLocationKit/AMapLocationKit.h&amp;gt; 调用方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 NSString</description>
    </item>
    
    <item>
      <title>Git工具交互式暂存</title>
      <link>https://it-boyer.github.io/post/old/git/git%E5%B7%A5%E5%85%B7%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%9A%82%E5%AD%98/</link>
      <pubDate>Thu, 12 Apr 2018 19:41:46 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/git/git%E5%B7%A5%E5%85%B7%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%9A%82%E5%AD%98/</guid>
      <description>交互式暂存 Git 自带的一些脚本可以使在命令行下工作更容易。 本节的几个互交命令可以帮助你将文件的特定部分组合成提交。 当你修改一组文件后，希望这些改</description>
    </item>
    
    <item>
      <title>iOS插件化开发之Small</title>
      <link>https://it-boyer.github.io/post/old/xcode/ios%E6%8F%92%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91%E4%B9%8Bsmall/</link>
      <pubDate>Wed, 11 Apr 2018 16:42:17 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/xcode/ios%E6%8F%92%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91%E4%B9%8Bsmall/</guid>
      <description>{% github it-boyer SmallDemo 5931b43 width = 30% %} 官网 small是android与iOS平台比较出名的轻巧的跨平台插件化框架，也正是被这一点吸引，决定将small应用到集团</description>
    </item>
    
    <item>
      <title>Objective-C的运行时库</title>
      <link>https://it-boyer.github.io/post/old/swift/objective-c%E7%9A%84%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BA%93/</link>
      <pubDate>Mon, 25 Sep 2017 20:01:36 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/objective-c%E7%9A%84%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BA%93/</guid>
      <description>Objective-C 运行时 Objective-C 是一门基于运行时的编程语言，这意味着所有方法、变量、类之间的链接，都会推迟到应用实际运行的最后一刻才会建立。这将给开发人员极高的灵</description>
    </item>
    
    <item>
      <title>GCD底层并发API</title>
      <link>https://it-boyer.github.io/post/old/ios/gcd%E5%BA%95%E5%B1%82%E5%B9%B6%E5%8F%91api/</link>
      <pubDate>Sun, 24 Sep 2017 18:21:38 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/ios/gcd%E5%BA%95%E5%B1%82%E5%B9%B6%E5%8F%91api/</guid>
      <description>这篇文章里，我们将会讨论一些 iOS 和 OS X 都可以使用的底层 API。除了 dispatch_once ，我们一般不鼓励使用其中的任何一种技术。 但是我们想要揭示出表面之下深层次的</description>
    </item>
    
    <item>
      <title>常见的后台实现</title>
      <link>https://it-boyer.github.io/post/old/ios/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%90%8E%E5%8F%B0%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 24 Sep 2017 11:03:35 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/ios/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%90%8E%E5%8F%B0%E5%AE%9E%E7%8E%B0/</guid>
      <description>概览 本文主要探讨一些常用后台任务的最佳实践： 如何做异步网络请求 如何异步处理大型文件，以保持较低的内存占用 操作队列 (Operation Queues) 还是 GCD ? 操作队列提供了在</description>
    </item>
    
    <item>
      <title>iOS多线程API介绍</title>
      <link>https://it-boyer.github.io/post/old/ios/ios%E5%A4%9A%E7%BA%BF%E7%A8%8Bapi%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sun, 24 Sep 2017 09:18:49 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/ios/ios%E5%A4%9A%E7%BA%BF%E7%A8%8Bapi%E4%BB%8B%E7%BB%8D/</guid>
      <description>并发所描述的概念就是同时运行多个任务。这些任务可能是以在单核 CPU 上分时（时间共享）的形式同时运行，也可能是在多核 CPU 上以真正的并行方式来运行。 OS</description>
    </item>
    
    <item>
      <title>iOS视图渲染</title>
      <link>https://it-boyer.github.io/post/old/ios/ui/ios%E8%A7%86%E5%9B%BE%E6%B8%B2%E6%9F%93/</link>
      <pubDate>Sat, 23 Sep 2017 14:51:07 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/ios/ui/ios%E8%A7%86%E5%9B%BE%E6%B8%B2%E6%9F%93/</guid>
      <description>图形堆栈 当像素映射到屏幕上的时候，后台发生了很多事情。但一旦他们显示到屏幕上，每一个像素均由三个颜色组件构成：红，绿，蓝。三个独立的颜色单元</description>
    </item>
    
    <item>
      <title>NSURLSession的使用说明</title>
      <link>https://it-boyer.github.io/post/old/ios/nsurlsession%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Fri, 08 Sep 2017 18:48:43 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/ios/nsurlsession%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</guid>
      <description>iOS 7 和 Mac OS X 10.9 Mavericks 中一个显著的变化就是对 Foundation URL 加载系统的彻底重构。 现在已经有人在深入苹果的网络层基础架构的地方做研究了，所以我想是时候来分享一些</description>
    </item>
    
    <item>
      <title>搞定III目录笔记</title>
      <link>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E6%90%9E%E5%AE%9Aiii%E7%9B%AE%E5%BD%95%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 17 Aug 2017 15:41:11 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E6%90%9E%E5%AE%9Aiii%E7%9B%AE%E5%BD%95%E7%AC%94%E8%AE%B0/</guid>
      <description>11个模型 《搞定III》 第1章 GTD现象 几类读者：似懂非懂型，止步于列举清单等 第二类：很难坚持 第三类：学以致用型 如何阅读本书： 手头备小本子，</description>
    </item>
    
    <item>
      <title>WKWebView控件和JS脚本传参及交互</title>
      <link>https://it-boyer.github.io/post/old/ios/ui/wkwebview%E6%8E%A7%E4%BB%B6%E5%92%8Cjs%E8%84%9A%E6%9C%AC%E4%BC%A0%E5%8F%82%E5%8F%8A%E4%BA%A4%E4%BA%92/</link>
      <pubDate>Fri, 07 Jul 2017 09:54:41 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/ios/ui/wkwebview%E6%8E%A7%E4%BB%B6%E5%92%8Cjs%E8%84%9A%E6%9C%AC%E4%BC%A0%E5%8F%82%E5%8F%8A%E4%BA%A4%E4%BA%92/</guid>
      <description>WebKit简介 {% github it-boyer WKWebView-JS d03bc0e width = 30% %} 自iOS8 以后，苹果推出了新框架 WebKit，提供了替换 UIWebView 的组件 WKWebView。各种 UIWebView 的性能问题没有了</description>
    </item>
    
    <item>
      <title>在slack上实现实时绘UML图</title>
      <link>https://it-boyer.github.io/post/old/%E5%AF%BC%E5%9B%BE/%E5%9C%A8slack%E4%B8%8A%E5%AE%9E%E7%8E%B0%E5%AE%9E%E6%97%B6%E7%BB%98uml%E5%9B%BE/</link>
      <pubDate>Wed, 28 Jun 2017 15:57:00 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E5%AF%BC%E5%9B%BE/%E5%9C%A8slack%E4%B8%8A%E5%AE%9E%E7%8E%B0%E5%AE%9E%E6%97%B6%E7%BB%98uml%E5%9B%BE/</guid>
      <description>umlbot源码库 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 title 部署一台heroku机器人\n支持在slack窗口实时</description>
    </item>
    
    <item>
      <title>Perfect开发天气接口API</title>
      <link>https://it-boyer.github.io/post/old/macos/perfect%E5%BC%80%E5%8F%91%E5%A4%A9%E6%B0%94%E6%8E%A5%E5%8F%A3api/</link>
      <pubDate>Mon, 26 Jun 2017 17:01:24 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/macos/perfect%E5%BC%80%E5%8F%91%E5%A4%A9%E6%B0%94%E6%8E%A5%E5%8F%A3api/</guid>
      <description>Perfect介绍 Perfect提供一系列代表请求和响应的对象组件，并允许在服务器上增加管理句柄用于产生页面内容。 所有对象都是在服务器对象创</description>
    </item>
    
    <item>
      <title>搞定2提升工作与生活效率的52项原则</title>
      <link>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E6%90%9E%E5%AE%9A2%E6%8F%90%E5%8D%87%E5%B7%A5%E4%BD%9C%E4%B8%8E%E7%94%9F%E6%B4%BB%E6%95%88%E7%8E%87%E7%9A%8452%E9%A1%B9%E5%8E%9F%E5%88%99/</link>
      <pubDate>Mon, 26 Jun 2017 10:41:37 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E6%90%9E%E5%AE%9A2%E6%8F%90%E5%8D%87%E5%B7%A5%E4%BD%9C%E4%B8%8E%E7%94%9F%E6%B4%BB%E6%95%88%E7%8E%87%E7%9A%8452%E9%A1%B9%E5%8E%9F%E5%88%99/</guid>
      <description>《搞定II》 前言 轻松实现轻松做事 第一部分 理清头绪，发挥创造力 第1章 理清思路，确立新方向 第2章 知道哪些事情自己尚未做，你才会为之心安 第3章 理清</description>
    </item>
    
    <item>
      <title>CoreML机器学习初级教程</title>
      <link>https://it-boyer.github.io/post/old/ios/coreml%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%88%9D%E7%BA%A7%E6%95%99%E7%A8%8B/</link>
      <pubDate>Sat, 24 Jun 2017 22:10:44 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/ios/coreml%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%88%9D%E7%BA%A7%E6%95%99%E7%A8%8B/</guid>
      <description>资源 Core ML开发文档 ML模型资源页面 在Working with Models中包含有几个常用的模型模板，例如用于在图片中检测物体——树、动物、人等等。 Integrating</description>
    </item>
    
    <item>
      <title>iOS11ARKit初探</title>
      <link>https://it-boyer.github.io/post/old/ios/ios11arkit%E5%88%9D%E6%8E%A2/</link>
      <pubDate>Sat, 24 Jun 2017 19:46:59 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/ios/ios11arkit%E5%88%9D%E6%8E%A2/</guid>
      <description>iOS11新技术 ARKit教程 增强现实(AR)描述用户体验，将2D或3D元素从设备的摄像头中添加到实时视图中，从而使这些元素出现在真实世界中</description>
    </item>
    
    <item>
      <title>plantuml语法概览</title>
      <link>https://it-boyer.github.io/post/old/%E5%AF%BC%E5%9B%BE/plantuml%E8%AF%AD%E6%B3%95%E6%A6%82%E8%A7%88/</link>
      <pubDate>Sat, 24 Jun 2017 18:08:49 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E5%AF%BC%E5%9B%BE/plantuml%E8%AF%AD%E6%B3%95%E6%A6%82%E8%A7%88/</guid>
      <description>{% pdf http://p27uwfdhv.bkt.clouddn.com/static/pdf/PlantUML_Language_Reference_Guide_ZH.pdf %}</description>
    </item>
    
    <item>
      <title>序列图sequence语法插件</title>
      <link>https://it-boyer.github.io/post/old/%E5%AF%BC%E5%9B%BE/%E5%BA%8F%E5%88%97%E5%9B%BEsequencediagram%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sat, 24 Jun 2017 16:00:03 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E5%AF%BC%E5%9B%BE/%E5%BA%8F%E5%88%97%E5%9B%BEsequencediagram%E8%AF%AD%E6%B3%95/</guid>
      <description>MarkDown插件 {% github bubkoo hexo-filter-sequence 4ab9c15 width = 30% %} 这个插件在markdown暂时无法渲染出图像，不建议使用。 官方 序列图预览工具 概述 序列图(sequenc</description>
    </item>
    
    <item>
      <title>使用Numbers做导图</title>
      <link>https://it-boyer.github.io/post/old/%E5%AF%BC%E5%9B%BE/%E4%BD%BF%E7%94%A8numbers%E5%81%9A%E5%AF%BC%E5%9B%BE/</link>
      <pubDate>Fri, 16 Jun 2017 17:43:31 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E5%AF%BC%E5%9B%BE/%E4%BD%BF%E7%94%A8numbers%E5%81%9A%E5%AF%BC%E5%9B%BE/</guid>
      <description>Pages文档、Numbers电子表格 和 Keynote演示文稿无不集思广益， 是创建精彩作品的理想工具。利用实时协作功能，你的团队成员可通过 M</description>
    </item>
    
    <item>
      <title>Xcode9新特性</title>
      <link>https://it-boyer.github.io/post/old/xcode/xcode9%E6%96%B0%E7%89%B9%E6%80%A7/</link>
      <pubDate>Thu, 15 Jun 2017 16:54:38 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/xcode/xcode9%E6%96%B0%E7%89%B9%E6%80%A7/</guid>
      <description>无线调试 升级设备系统 体验iOS11系统需要几步操作： 下载配置文件：iOS_11_beta_Configuration_Profile，在手机</description>
    </item>
    
    <item>
      <title>Xcode8中SB适配横竖屏按钮VaryforTraits</title>
      <link>https://it-boyer.github.io/post/old/xcode/xcode8%E4%B8%ADsb%E9%80%82%E9%85%8D%E6%A8%AA%E7%AB%96%E5%B1%8F%E6%8C%89%E9%92%AEvaryfortraits/</link>
      <pubDate>Tue, 13 Jun 2017 17:33:59 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/xcode/xcode8%E4%B8%ADsb%E9%80%82%E9%85%8D%E6%A8%AA%E7%AB%96%E5%B1%8F%E6%8C%89%E9%92%AEvaryfortraits/</guid>
      <description>升级xcode8之后，打开storyboard发现xcode7适配界面的size class被Trait Variations所取代: Trait Vari</description>
    </item>
    
    <item>
      <title>搞定1无压工作的艺术</title>
      <link>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E6%90%9E%E5%AE%9A1%E6%97%A0%E5%8E%8B%E5%B7%A5%E4%BD%9C%E7%9A%84%E8%89%BA%E6%9C%AF/</link>
      <pubDate>Tue, 13 Jun 2017 10:34:26 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E6%90%9E%E5%AE%9A1%E6%97%A0%E5%8E%8B%E5%B7%A5%E4%BD%9C%E7%9A%84%E8%89%BA%E6%9C%AF/</guid>
      <description>前言 第一部分 通向从容之道 第1章 新情况，新做法 如何回归“心如止水”的境界 在知识工作的环境下（信息大爆炸，事物繁杂的特点），传统时间管理法逐渐无</description>
    </item>
    
    <item>
      <title>swift开发macOS系统的终端命令行应用</title>
      <link>https://it-boyer.github.io/post/old/macos/swift%E5%BC%80%E5%8F%91macos%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%94%E7%94%A8/</link>
      <pubDate>Mon, 29 May 2017 13:00:08 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/macos/swift%E5%BC%80%E5%8F%91macos%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%94%E7%94%A8/</guid>
      <description>教程 命令行程序MacOS的教程 使用swift创建一个命令行程序，相比其他语言如C、Perl、Ruby或java。 选用SWIFT的理由： Swi</description>
    </item>
    
    <item>
      <title>如何阅读一本书目录</title>
      <link>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6%E7%9B%AE%E5%BD%95/</link>
      <pubDate>Sun, 28 May 2017 12:04:28 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6%E7%9B%AE%E5%BD%95/</guid>
      <description>脑图 {% iframe http://naotu.baidu.com/file/3cd277713d4ebb210443ffaf9c8f38e6?token=9200f134c9b8f825 700 300 %} 第一篇 阅读的层次 第一章 阅读的活力与艺术 第二章 阅读的层次 第三章 阅读的第一个层次：基础阅读 第四章 阅读的第二个层次：检视阅读 第五章</description>
    </item>
    
    <item>
      <title>搞定书籍目录</title>
      <link>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E6%90%9E%E5%AE%9A%E4%B9%A6%E7%B1%8D%E7%9B%AE%E5%BD%95/</link>
      <pubDate>Sun, 28 May 2017 12:04:28 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E6%90%9E%E5%AE%9A%E4%B9%A6%E7%B1%8D%E7%9B%AE%E5%BD%95/</guid>
      <description>《搞定I》 前言 第一部分 通向从容之道？ 第1章 新情况，新做法？ 收集存档清空大脑，万物皆于此， 2分钟法则整理可立刻执行的有效清单，不做材料清单 第2</description>
    </item>
    
    <item>
      <title>升职必备的技能修炼二 以道御术</title>
      <link>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E4%BF%AE%E7%82%BC%E5%8D%87%E8%81%8C%E5%BF%85%E5%A4%87%E7%9A%84%E6%8A%80%E8%83%BD%E4%BA%8C/</link>
      <pubDate>Thu, 25 May 2017 18:09:00 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E4%BF%AE%E7%82%BC%E5%8D%87%E8%81%8C%E5%BF%85%E5%A4%87%E7%9A%84%E6%8A%80%E8%83%BD%E4%BA%8C/</guid>
      <description>“老付”谈论的是目标，所有的方法都是为目标服务的，目标统率人的行为。 怎样规划自己的人生？ 怎样树立自己的目标？ 怎样把目标转化成实际的行动？ 怎样</description>
    </item>
    
    <item>
      <title>修炼升职必备的技能</title>
      <link>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E4%BF%AE%E7%82%BC%E5%8D%87%E8%81%8C%E5%BF%85%E5%A4%87%E7%9A%84%E6%8A%80%E8%83%BD/</link>
      <pubDate>Thu, 25 May 2017 16:40:42 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E9%98%85%E8%AF%BB/%E4%BF%AE%E7%82%BC%E5%8D%87%E8%81%8C%E5%BF%85%E5%A4%87%E7%9A%84%E6%8A%80%E8%83%BD/</guid>
      <description>焦虑是由于缺乏控制力，以及组织管理、准备和行动不足所造成的。 四象限 走出第三象限，将工作重心放进第二象限 第二象限法则 猴子法则：屏蔽干扰的伎俩 项</description>
    </item>
    
    <item>
      <title>远程操作mysql数据库</title>
      <link>https://it-boyer.github.io/post/old/%E5%85%B6%E4%BB%96/%E8%BF%9C%E7%A8%8B%E6%93%8D%E4%BD%9Cmysql%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Wed, 24 May 2017 17:07:47 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E5%85%B6%E4%BB%96/%E8%BF%9C%E7%A8%8B%E6%93%8D%E4%BD%9Cmysql%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>腾讯云服务器 申请账户，体验5天，搭建一个jira服务，还有微信小程序服务 需要在服务器上安装docker （腾讯服务器提供了一款支持docker</description>
    </item>
    
    <item>
      <title>iOS和OSX集成gitAPI</title>
      <link>https://it-boyer.github.io/post/old/%E5%BC%80%E6%BA%90%E5%BA%93/ios%E5%92%8Cosx%E9%9B%86%E6%88%90gitapi/</link>
      <pubDate>Wed, 17 May 2017 17:33:46 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E5%BC%80%E6%BA%90%E5%BA%93/ios%E5%92%8Cosx%E9%9B%86%E6%88%90gitapi/</guid>
      <description>在项目中使用git submodule工具集成子项目ObjectiveGit 在新项目中使用git submodule集成gitAPI 参考官方提供</description>
    </item>
    
    <item>
      <title>SubModule与SubTree的差异</title>
      <link>https://it-boyer.github.io/post/old/git/submodule%E4%B8%8Esubtree%E7%9A%84%E5%B7%AE%E5%BC%82/</link>
      <pubDate>Wed, 17 May 2017 11:23:22 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/git/submodule%E4%B8%8Esubtree%E7%9A%84%E5%B7%AE%E5%BC%82/</guid>
      <description>核心区别 git submodule类似于引用，而git subtree类似于拷贝，比如你在一篇博客中想用到你另一篇博客的内容，git submodul</description>
    </item>
    
    <item>
      <title>开发思想模式总结</title>
      <link>https://it-boyer.github.io/post/old/%E5%AF%BC%E5%9B%BE/%E5%BC%80%E5%8F%91%E6%80%9D%E6%83%B3%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 15 May 2017 16:14:07 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E5%AF%BC%E5%9B%BE/%E5%BC%80%E5%8F%91%E6%80%9D%E6%83%B3%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/</guid>
      <description>OOP面向对象编程：1. 封装，2，继承，3. 多态 五大原则： SRP单一职责原则：一个类的功能要单一，表现突出的VIPER模式 OCP开放封闭原则</description>
    </item>
    
    <item>
      <title>RxSwift基本概念</title>
      <link>https://it-boyer.github.io/post/old/%E5%BC%80%E6%BA%90%E5%BA%93/rxswift%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Fri, 03 Mar 2017 13:01:41 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E5%BC%80%E6%BA%90%E5%BA%93/rxswift%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid>
      <description>FRP函数式反应型编程 Functional Reactive Programming ， 缩写为 FRP 函数编程 函数是第一等公民 所谓 第一等公民 (first class) ，指的是函数与其他数据类型一样，处于平等地位。既可以赋值给其</description>
    </item>
    
    <item>
      <title>互动性的教学工具XCPlayground</title>
      <link>https://it-boyer.github.io/post/old/swift/%E4%BA%92%E5%8A%A8%E6%80%A7%E7%9A%84%E6%95%99%E5%AD%A6%E5%B7%A5%E5%85%B7xcplayground/</link>
      <pubDate>Wed, 01 Mar 2017 17:27:16 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/%E4%BA%92%E5%8A%A8%E6%80%A7%E7%9A%84%E6%95%99%E5%AD%A6%E5%B7%A5%E5%85%B7xcplayground/</guid>
      <description>Playground 展示语法和实时执行真实数据的特性，为编写方法和库接口提供了很好的机会，通过实时编译我们能了解语法、写出例子以及获得方法如何使用的说明，所有</description>
    </item>
    
    <item>
      <title>使用Cocoapods创建私有podspec</title>
      <link>https://it-boyer.github.io/post/old/macos/%E4%BD%BF%E7%94%A8cocoapods%E5%88%9B%E5%BB%BA%E7%A7%81%E6%9C%89podspec/</link>
      <pubDate>Tue, 28 Feb 2017 15:46:16 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/macos/%E4%BD%BF%E7%94%A8cocoapods%E5%88%9B%E5%BB%BA%E7%A7%81%E6%9C%89podspec/</guid>
      <description>创建一个版本库来托管pod索引:pod repo add命令 第一步：在github登录个人账号，创建一个库作为pod索引托管库。也可根据具体情况可以选</description>
    </item>
    
    <item>
      <title>UIStackView教程了解StackView</title>
      <link>https://it-boyer.github.io/post/old/ios/ui/uistackview%E6%95%99%E7%A8%8B%E4%BA%86%E8%A7%A3stackview/</link>
      <pubDate>Fri, 24 Feb 2017 18:12:14 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/ios/ui/uistackview%E6%95%99%E7%A8%8B%E4%BA%86%E8%A7%A3stackview/</guid>
      <description>原地址 UIStackView简单介绍 一个Stack View能够将它所含的View以各种方式沿其轴向进行分布，同时也可以将View沿某个方向等</description>
    </item>
    
    <item>
      <title>高期望实现异步单元测试</title>
      <link>https://it-boyer.github.io/post/old/%E8%B0%83%E8%AF%95/%E9%AB%98%E6%9C%9F%E6%9C%9B%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Mon, 20 Feb 2017 23:09:30 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E8%B0%83%E8%AF%95/%E9%AB%98%E6%9C%9F%E6%9C%9B%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <description>异步单元测试 在Xcode 6之前的版本里面并没有内置XCTest，只能是在主线程的RunLoop里面使用一个while循环,然后一直等待响应或</description>
    </item>
    
    <item>
      <title>JavaScript自动化组件OC桥接</title>
      <link>https://it-boyer.github.io/post/old/macos/javascript%E8%87%AA%E5%8A%A8%E5%8C%96%E7%BB%84%E4%BB%B6oc%E6%A1%A5%E6%8E%A5/</link>
      <pubDate>Wed, 15 Feb 2017 17:19:30 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/macos/javascript%E8%87%AA%E5%8A%A8%E5%8C%96%E7%BB%84%E4%BB%B6oc%E6%A1%A5%E6%8E%A5/</guid>
      <description>文档 JavaScript自动化有一个内置的Objective-C Bridge，使您能够访问文件系统，创建Cocoa应用程序。 Objective-C Bridge的</description>
    </item>
    
    <item>
      <title>macOS之PDFKit基础</title>
      <link>https://it-boyer.github.io/post/old/macos/macos%E4%B9%8Bpdfkit%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Tue, 14 Feb 2017 14:29:18 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/macos/macos%E4%B9%8Bpdfkit%E5%9F%BA%E7%A1%80/</guid>
      <description>一个PDF的基本构建块是Documents本身。Documents通常作为文件存储在磁盘上。 作为文件版本，可以支持元数据标记如作者，创建日期</description>
    </item>
    
    <item>
      <title>思维导图之开发实践篇</title>
      <link>https://it-boyer.github.io/post/old/%E5%AF%BC%E5%9B%BE/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E4%B9%8B%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E7%AF%87/</link>
      <pubDate>Mon, 13 Feb 2017 17:11:26 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E5%AF%BC%E5%9B%BE/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E4%B9%8B%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E7%AF%87/</guid>
      <description>阅读书籍 5种图表解决工作中的12大难题 你的第一本思维导图操作书 5分钟手绘彩色圆珠笔涂鸦集 如果阅读一本书 使用思维导图的场景无处不在，无论是做产</description>
    </item>
    
    <item>
      <title>使用JavaScript把JSON数据定义对象</title>
      <link>https://it-boyer.github.io/post/old/swift/%E4%BD%BF%E7%94%A8javascript%E6%8A%8Ajson%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sun, 12 Feb 2017 14:41:35 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/%E4%BD%BF%E7%94%A8javascript%E6%8A%8Ajson%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%E5%AF%B9%E8%B1%A1/</guid>
      <description>将JSON数据序列化为代码实例 定义一个继承自 JSExport 子协议 PersonJSExports 定义一个遵守PersonJSExports协议的Person数据模 使用 JavaScript 把JSON转为</description>
    </item>
    
    <item>
      <title>AR 开发资料汇</title>
      <link>https://it-boyer.github.io/post/old/swift/ar%E5%BC%80%E5%8F%91%E8%B5%84%E6%96%99%E6%B1%87/</link>
      <pubDate>Sun, 22 Jan 2017 18:55:21 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/ar%E5%BC%80%E5%8F%91%E8%B5%84%E6%96%99%E6%B1%87/</guid>
      <description>总结了AR开发的平台汇总，AR视频经典教程，AR主流资讯网站，Vuforia，EasyAR一些实例教程以及AR精选应用。 AR 平台 Vuforia</description>
    </item>
    
    <item>
      <title>Awsome Apple Develop Guide[转]</title>
      <link>https://it-boyer.github.io/post/old/swift/awsomeappledevelopguide/</link>
      <pubDate>Sun, 22 Jan 2017 18:55:21 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/awsomeappledevelopguide/</guid>
      <description>此文档是Apple平台开发所使用语言的主流学习资源 iOS开发者博客 使用 iOSBlogCN添加或者订阅 从社区学习知识 iOS技术周报 objc中国</description>
    </item>
    
    <item>
      <title>iOS面试题大集合[转]</title>
      <link>https://it-boyer.github.io/post/old/swift/ios%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E9%9B%86%E5%90%88/</link>
      <pubDate>Sun, 22 Jan 2017 18:55:21 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/ios%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E9%9B%86%E5%90%88/</guid>
      <description>面试题从何处得来 招聘一个靠谱的 iOS 知乎－如何面试 iOS 工程师？ 阅读面试题之前 在正式开始之前，我期望你能对iOS/Mac OS X平台开发有所了解，在iO</description>
    </item>
    
    <item>
      <title>腾讯云之小直播开发</title>
      <link>https://it-boyer.github.io/post/old/%E5%85%B6%E4%BB%96/%E8%85%BE%E8%AE%AF%E4%BA%91%E4%B9%8B%E5%B0%8F%E7%9B%B4%E6%92%AD%E5%BC%80%E5%8F%91/</link>
      <pubDate>Sun, 22 Jan 2017 18:55:21 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E5%85%B6%E4%BB%96/%E8%85%BE%E8%AE%AF%E4%BA%91%E4%B9%8B%E5%B0%8F%E7%9B%B4%E6%92%AD%E5%BC%80%E5%8F%91/</guid>
      <description>视频服务 直播LVB 开发指南 移动直播MLVB 开发指南 移动直播是一套移动终端直播解决方案的集合，它以免费源码的形式向您展示：如何利用腾讯云直播(</description>
    </item>
    
    <item>
      <title>swift错误处理</title>
      <link>https://it-boyer.github.io/post/old/swift/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link>
      <pubDate>Wed, 11 Jan 2017 17:04:21 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid>
      <description>&lt;p&gt;Error handling is the process of responding to and recovering from error conditions in your program. Swift provides first-class support for throwing, catching, propagating, and manipulating recoverable errors at runtime.
Some operations aren’t guaranteed to always complete execution or produce a useful output. Optionals are used to represent the absence of a value, but when an operation fails, it’s often useful to understand what caused the failure, so that your code can respond accordingly.
As an example, consider the task of reading and processing data from a file on disk. There are a number of ways this task can fail, including the file not existing at the specified path, the file not having read permissions, or the file not being encoded in a compatible format. Distinguishing among these different situations allows a program to resolve some errors and to communicate to the user any errors it can’t resolve.
举例，在读取和处理磁盘上的一个文件的数据时，会有有许多方法失败，包括指定的文件路径找不到，没有文件的读取权限，或文件编码格式不兼容。在这些不同情况下，就可以让程序提示用户导致程序无法执行的具体原因。&lt;/p&gt;
&lt;h1 id=&#34;representing-and-throwing-errors&#34;&gt;Representing and Throwing Errors&lt;/h1&gt;
&lt;p&gt;In Swift, errors are represented by values of types that conform to the Error protocol. This empty protocol indicates that a type can be used for error handling.
在swift中，错误类型是遵循Error 协议。&lt;/p&gt;
&lt;p&gt;Swift enumerations are particularly well suited to modeling a group of related error conditions, with associated values allowing for additional information about the nature of an error to be communicated. For example, here’s how you might represent the error conditions of operating a vending machine inside a game:
swift枚举类型特别适合为一组错误条件建模，用来关联导致错误的真正原因的相关信息。例如：
一个在操作一台游戏机时的会出现的错误枚举类：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;VendingMachineError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;invalidSelection&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;insufficientFunds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;coinsNeeded&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;outOfStock&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Throwing an error lets you indicate that something unexpected happened and the normal flow of execution can’t continue. You use a throw statement to throw an error. For example, the following code throws an error to indicate that five additional coins are needed by the vending machine:
抛出错误说明游戏出现异常，导致其他操作无法进行。这是需要通过Throw语句来抛出这个错误。例如，以下代码抛出了一个错误表明需要five：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;VendingMachineError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;insufficientFunds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;coinsNeeded&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;handling-errors&#34;&gt;Handling Errors&lt;/h1&gt;
&lt;p&gt;When an error is thrown, some surrounding piece of code must be responsible for handling the error—for example, by correcting the problem, trying an alternative approach, or informing the user of the failure.
当错误抛出后，这段代码必须来处理这个错误。例如：通过纠正问题，尝试其他方式实现，或通知用户的失败。&lt;/p&gt;
&lt;p&gt;There are four ways to handle errors in Swift. You can propagate the error from a function to the code that calls that function, handle the error using a do-catch statement, handle the error as an optional value, or assert that the error will not occur. Each approach is described in a section below.
在swift中有四种处理错误机制:
1. 向调用方法中传递这个错误
2. 使用do-catch语句处理
3. 把错误设置为可选型
4.断言不会出现异常的情况下，使用try!禁止异常抛出&lt;/p&gt;
&lt;p&gt;When a function throws an error, it changes the flow of your program, so it’s important that you can quickly identify places in your code that can throw errors. To identify these places in your code, write the try keyword—or the try? or try! variation—before a piece of code that calls a function, method, or initializer that can throw an error. These keywords are described in the sections below.
当一个方法抛出错误时，会打断程序正常的工作流，必须快速定位到可能抛出错误的代码。可以使用关键字&lt;code&gt;try&lt;/code&gt; 要注意 &lt;code&gt;try?&lt;/code&gt;或&lt;code&gt;try!&lt;/code&gt;之间的差异。在调用一个函数，方法或者构造器之前，来抛出异常。&lt;/p&gt;
&lt;h2 id=&#34;propagating-errors-using-throwing-functions&#34;&gt;Propagating Errors Using Throwing Functions&lt;/h2&gt;
&lt;p&gt;To indicate that a function, method, or initializer can throw an error, you write the throws keyword in the function’s declaration after its parameters. A function marked with throws is called a throwing function. If the function specifies a return type, you write the throwskeyword before the return arrow (-&amp;gt;).
函数，方法或构造器都可以抛出异常，只需要在声明它们时添加关键字：&lt;code&gt;throws&lt;/code&gt;即可，这种方法被称为&lt;code&gt;throws&lt;/code&gt;函数，&lt;code&gt;throws&lt;/code&gt;关键字位置在参数之后，返回值(-&amp;gt;)之前&lt;/p&gt;
&lt;p&gt;A throwing function propagates errors that are thrown inside of it to the scope from which it’s called.
抛出函数会把错误抛给调用它的函数周期中去。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Swift 语言指南[转]</title>
      <link>https://it-boyer.github.io/post/old/swift/swiftguide/</link>
      <pubDate>Tue, 03 Jan 2017 17:05:20 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/swiftguide/</guid>
      <description>Swift 语言指南 @SwiftLanguage 更新于 2016-6-6，更新内容详见 Issue 55。往期更新回顾详见《收录周报》 这份指南汇集了 Swift 语言主流学习资源，并以开发者的视角整理编</description>
    </item>
    
    <item>
      <title>Docker使用</title>
      <link>https://it-boyer.github.io/post/old/%E5%85%B6%E4%BB%96/docker%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 21 Dec 2016 21:25:29 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E5%85%B6%E4%BB%96/docker%E4%BD%BF%E7%94%A8/</guid>
      <description>安装Docker for Mac 在Mac上运行Docker。系统要求，OS X 10.10.3 或者更高版本，至少4G内存，4.3.30版本以前的VirtualBox会与</description>
    </item>
    
    <item>
      <title>Realm数据库引擎-swift</title>
      <link>https://it-boyer.github.io/post/old/%E5%BC%80%E6%BA%90%E5%BA%93/realm%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E6%93%8E-swift/</link>
      <pubDate>Wed, 16 Dec 2015 05:56:15 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E5%BC%80%E6%BA%90%E5%BA%93/realm%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E6%93%8E-swift/</guid>
      <description>中心思想： 继承RLMObject新建数据模型，添加相应属性，即可使用realm数据库引擎，对用户数据创建持久化，更新，删除等操作。 简介： Realm 是</description>
    </item>
    
    <item>
      <title>Swift入门</title>
      <link>https://it-boyer.github.io/post/old/swift/swift%E5%85%A5%E9%97%A8/</link>
      <pubDate>Fri, 27 Nov 2015 17:18:21 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/swift%E5%85%A5%E9%97%A8/</guid>
      <description>苹果官方 中文版 背景 Apple基于已有的编译器、调试器、框架作为其基础架构。通过ARC(Automatic Reference Counting，自动引用计数)来</description>
    </item>
    
    <item>
      <title>[转]Swift最佳实践</title>
      <link>https://it-boyer.github.io/post/old/swift/%E8%BD%ACswift%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 29 Sep 2015 17:05:21 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/%E8%BD%ACswift%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
      <description>[英文][SwiftCommunityBestPractices] [SwiftCommunityBestPractices]: https://github.com/schwa/Swift-Community-Best-Practices [SwiftCommunity]: http://swift-lang.schwa.io/ [swiftCaptureLists]: http://www.russbishop.net/swift-capture-lists [SwiftURL]: https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/index.html [驼峰命名法URL]: http://www.wikiwand.com/en/Studly_caps [匈牙利命名法URL]: http://www.wikiwand.com/en/Hungarian_notation 黄金法则</description>
    </item>
    
    <item>
      <title>Xcode和Jenkins持续集成的几种实现方式</title>
      <link>https://it-boyer.github.io/post/old/macos/xcode%E5%92%8Cjenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Fri, 18 Sep 2015 23:52:06 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/macos/xcode%E5%92%8Cjenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</guid>
      <description>&lt;h2 id=&#34;ci服务器&#34;&gt;CI服务器&lt;/h2&gt;
&lt;p&gt;写到这儿，对于iOS开发者来说，需要准备好：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个比较容易获取的源代码仓库(包含源代码)&lt;/li&gt;
&lt;li&gt;一套自动化构建脚本&lt;/li&gt;
&lt;li&gt;一系列围绕构建的可执行测试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来就需要一个CI服务器来根据源代码的变更触发构建，监控测试结果。&lt;/p&gt;
&lt;p&gt;目前，业界比较流行的，支持iOS构建的CI服务器有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://travis-ci.org&#34;&gt;Travis CI&lt;/a&gt;：是一个免费的云服务平台，基本上支持所有目前主流的语言，Object-C自然也在其中，但是只支持github极大的限制了其应用场景。目前国内无法访问，&lt;a href=&#34;http://www.infoq.com/cn/articles/build-ios-continuous-integration-platform-part3&#34;&gt;详见&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Jenkins&lt;/strong&gt;：经过多年的发展，其活跃的社区和丰富的插件让其成为了业界最受欢迎的CI服务器。通过使用Xcode插件，可以非常方便在Jenkins中运行iOS项目的构建脚本。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Git中的储藏工具stash</title>
      <link>https://it-boyer.github.io/post/old/git/git%E4%B8%AD%E7%9A%84%E5%82%A8%E8%97%8F%E5%B7%A5%E5%85%B7stash/</link>
      <pubDate>Mon, 19 Jan 2015 19:57:04 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/git/git%E4%B8%AD%E7%9A%84%E5%82%A8%E8%97%8F%E5%B7%A5%E5%85%B7stash/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;Stashing&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;储藏工作&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;应用储藏&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;被暂存的文件重新暂存&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;应用后，移除储藏的内容&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;取消储藏(Un-applying a Stash)&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;新建stash-unapply别名&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;从储藏中创建分支&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;a-namestashinggit工具---储藏stashingagit&#34;&gt;&lt;!-- raw HTML omitted --&gt;Git工具 - 储藏（Stashing）&lt;!-- raw HTML omitted --&gt;git&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%82%A8%E8%97%8F%E4%B8%8E%E6%B8%85%E7%90%86&#34;&gt;原文&lt;/a&gt;
场景：当项目中某一部分正在编码中，突然接到新任务，又必须换至其他分支去完成。&lt;/p&gt;
&lt;p&gt;问题：你不想提交进行了一半的工作，否则以后你无法回到这个工作点。&lt;/p&gt;
&lt;p&gt;解决：**&lt;!-- raw HTML omitted --&gt;git stash &lt;!-- raw HTML omitted --&gt;**命令。&lt;/p&gt;
&lt;p&gt;“Stashing”可以获取工作目录的中间状态，即：将修改过的被追踪的文件和暂存的变更，保存到一个未完结变更的堆栈中，随时可以重新应用。&lt;/p&gt;
&lt;h3 id=&#34;a-namework储藏工作a&#34;&gt;&lt;!-- raw HTML omitted --&gt;储藏工作&lt;!-- raw HTML omitted --&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;进入项目目录，修改某个文件，有可能还暂存其中的一个变更。&lt;/li&gt;
&lt;li&gt;**&lt;!-- raw HTML omitted --&gt;git status &lt;!-- raw HTML omitted --&gt;**命令,查看中间状态：
{%codeblock lang:bash %}
$ git status&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;on-branch-master&#34;&gt;On branch master&lt;/h1&gt;
&lt;h1 id=&#34;changes-to-be-committed&#34;&gt;Changes to be committed:&lt;/h1&gt;
&lt;h1 id=&#34;use-git-reset-head-file-to-unstage&#34;&gt;(use &amp;ldquo;git reset HEAD &lt;!-- raw HTML omitted --&gt;&amp;hellip;&amp;rdquo; to unstage)&lt;/h1&gt;
&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;h1 id=&#34;modified---indexhtml&#34;&gt;modified:   index.html&lt;/h1&gt;
&lt;h1 id=&#34;heading-1&#34;&gt;&lt;/h1&gt;
&lt;h1 id=&#34;changes-not-staged-for-commit&#34;&gt;Changes not staged for commit:&lt;/h1&gt;
&lt;h1 id=&#34;use-git-add-file-to-update-what-will-be-committed&#34;&gt;(use &amp;ldquo;git add &lt;!-- raw HTML omitted --&gt;&amp;hellip;&amp;rdquo; to update what will be committed)&lt;/h1&gt;
&lt;h1 id=&#34;heading-2&#34;&gt;&lt;/h1&gt;
&lt;h1 id=&#34;modified---libsimplegitrb&#34;&gt;modified:   lib/simplegit.rb&lt;/h1&gt;
&lt;h1 id=&#34;heading-3&#34;&gt;&lt;/h1&gt;
&lt;p&gt;{%endcodeblock%}
3. 切换分支，但不提交step 1 中的变更，所以储藏这些变更。
执行**&lt;!-- raw HTML omitted --&gt;git stash &lt;!-- raw HTML omitted --&gt;**命令，往堆栈中推送一个新的储藏：
{%codeblock lang:bash %}
$ git stash
Saved working directory and index state&lt;br&gt;
&amp;ldquo;WIP on master: 049d078 added the index file&amp;rdquo;
HEAD is now at 049d078 added the index file
(To restore them type &amp;ldquo;git stash apply&amp;rdquo;)
{%endcodeblock%}
4. 执行step 2查看目录库，中间状态就不见了：
{%codeblock lang:bash %}
$ git status
#######On branch master
nothing to commit, working directory clean
{%endcodeblock%}
这时，你可以方便地切换到其他分支工作；你的变更都保存在栈上。
5. 使用**&lt;!-- raw HTML omitted --&gt;git stash list&lt;!-- raw HTML omitted --&gt;**要查看现有的储藏：
{%codeblock lang:bash%}
$ git stash list
stash@{0}: WIP on master: 049d078 added the index file
stash@{1}: WIP on master: c264051 Revert &amp;ldquo;added file_size&amp;rdquo;
stash@{2}: WIP on master: 21d80a5 added number to log
{%endcodeblock%}
在这个案例中，之前已经进行了两次储藏，所以你可以访问到三个不同的储藏。&lt;/p&gt;
&lt;h3 id=&#34;a-nameapply应用储藏a&#34;&gt;&lt;!-- raw HTML omitted --&gt;应用储藏&lt;!-- raw HTML omitted --&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;执行**&lt;!-- raw HTML omitted --&gt;git stash apply&lt;!-- raw HTML omitted --&gt;**命令, 可以重新应用最近的一次储藏；
执行**&lt;!-- raw HTML omitted --&gt;git stash apply stash@{2}&lt;!-- raw HTML omitted --&gt;**命令，即通过指定储藏的名字，来应用更早的储藏。
{%codeblock lang:bash%}
$ git stash apply&lt;/p&gt;
&lt;h1 id=&#34;on-branch-master-1&#34;&gt;On branch master&lt;/h1&gt;
&lt;h1 id=&#34;changes-not-staged-for-commit-1&#34;&gt;Changes not staged for commit:&lt;/h1&gt;
&lt;h1 id=&#34;use-git-add-file-to-update-what-will-be-committed-1&#34;&gt;(use &amp;ldquo;git add &lt;!-- raw HTML omitted --&gt;&amp;hellip;&amp;rdquo; to update what will be committed)&lt;/h1&gt;
&lt;h1 id=&#34;heading-4&#34;&gt;&lt;/h1&gt;
&lt;h1 id=&#34;modified---indexhtml-1&#34;&gt;modified:   index.html&lt;/h1&gt;
&lt;h1 id=&#34;modified---libsimplegitrb-1&#34;&gt;modified:   lib/simplegit.rb&lt;/h1&gt;
&lt;h1 id=&#34;heading-5&#34;&gt;&lt;/h1&gt;
&lt;p&gt;{%endcodeblock%}&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>XMPP简单研究[转]</title>
      <link>https://it-boyer.github.io/post/old/%E5%BC%80%E6%BA%90%E5%BA%93/xmpp%E7%AE%80%E5%8D%95%E7%A0%94%E7%A9%B6%E8%BD%AC/</link>
      <pubDate>Tue, 06 Jan 2015 14:36:06 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/%E5%BC%80%E6%BA%90%E5%BA%93/xmpp%E7%AE%80%E5%8D%95%E7%A0%94%E7%A9%B6%E8%BD%AC/</guid>
      <description>最近想做一个游戏服务器和 IM 互通的服务。最初的想法是可以增进游戏帐号的安全，比如游戏用户可以通过绑定一个 IM 帐号，从而不用登陆游戏就向游戏服务器</description>
    </item>
    
    <item>
      <title>在IOS中自定义URLSchemes教程</title>
      <link>https://it-boyer.github.io/post/old/ios/%E5%9C%A8ios%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89urlschemes%E6%95%99%E7%A8%8B/</link>
      <pubDate>Thu, 28 Aug 2014 20:32:48 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/ios/%E5%9C%A8ios%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89urlschemes%E6%95%99%E7%A8%8B/</guid>
      <description>&lt;h4 id=&#34;url-schemes&#34;&gt;URL Schemes&lt;/h4&gt;
&lt;p&gt;iPhone SDK中最酷的功能之一是一个应用程序能够把自己和自定义的URL协议绑定，这个URL协议可用于启动该应用程序（通过浏览器或者iPhone上的另一个程序）。创建这样的绑定并不难，难得的是你忍不住要在你的程序里用它！&lt;/p&gt;
&lt;p&gt;首先，你需要说明你想如何在程序中响应这个URL。最简单的自定义协议的方法是“唤醒”，而且可以通过URL把数据信息传递给程序，这样，程序被唤醒后能做更多的事情。&lt;/p&gt;
&lt;h4 id=&#34;注册自定义url协议&#34;&gt;注册自定义URL协议&lt;/h4&gt;
&lt;p&gt;首先需要向iPhone注册一个自定义URL协议。这是在你的项目文件夹的info.plist文件进行的（就是你改变应用程序图标的同一个文件）。&lt;/p&gt;
&lt;p&gt;默认，Xcode在图形窗口中打开info.pllist，当然也可以直接用文本模式打开——对有的人来说这反而更简单。&lt;/p&gt;
&lt;h6 id=&#34;step1-右键选择add-row在下拉选框中选择url-types类型为array&#34;&gt;Step1. 右键，选择“Add Row”,在下拉选框中选择“&lt;strong&gt;URL types&lt;/strong&gt;”，类型为Array:&lt;/h6&gt;
&lt;h6 id=&#34;step2-打开item-0类型为dic添加新key为url-identifier类型为string可以是任何值但建议用反域名例如-commyapp&#34;&gt;Step2. 打开“Item 0″类型为Dic,添加新key为&amp;quot;URL identifier&amp;quot;,类型为String。可以是任何值，但建议用“反域名”(例如 “com.myapp”)。&lt;/h6&gt;
&lt;h5 id=&#34;step3-打开item-0类型为dic添加新key为url-schemes类型为array&#34;&gt;Step3. 打开“Item 0″类型为Dic,添加新key为“URL Schemes”,类型为Array:&lt;/h5&gt;</description>
    </item>
    
    <item>
      <title>XcodeHeaderDoc教程</title>
      <link>https://it-boyer.github.io/post/old/xcode/xcodeheaderdoc%E6%95%99%E7%A8%8B/</link>
      <pubDate>Thu, 28 Aug 2014 15:18:41 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/xcode/xcodeheaderdoc%E6%95%99%E7%A8%8B/</guid>
      <description>&lt;p&gt;HeaderDoc 是在Xcode 5 和 iOS7 发布时，新增的一个命令行工具，功能：可以从代码中自动生成格式良好的HTML文档——当然，必须依赖于特定格式的注释来完成的。&lt;/p&gt;
&lt;p&gt;另外，Xcode 还会在 quick look 面板中以&lt;strong&gt;HeaderDoc&lt;/strong&gt;风格显示你的注释。&lt;/p&gt;
&lt;p&gt;通过本教程，将学习如下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何书写 HeaderDoc 风格的注释&lt;/li&gt;
&lt;li&gt;分如何在 Xcode 中预览文档&lt;/li&gt;
&lt;li&gt;如何生成 HTML 文档&lt;/li&gt;
&lt;li&gt;如何使用 VVDocumenter-Xcode(一个易于使用的第3方文档制作工具)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;准备工作&#34;&gt;准备工作&lt;/h4&gt;
&lt;p&gt;下载本教程中用到的 &lt;a href=&#34;http://cdn2.raywenderlich.com/wp-content/uploads/2014/03/DocumentationExamples_Starter.zip&#34;&gt;示例项目&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个简单的示例程序只包含了两个类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Car: 包含几个属性及一个 “drive” 方法以及一个 completion 块。&lt;/li&gt;
&lt;li&gt;MathAPI: 包含了1个方法，用于累加两个数。
现在，这两个类还没有任何注释。以便演示如何通过 &lt;strong&gt;HeaderDoc&lt;/strong&gt; 为这两个类创建文档。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Storyboard之Segue</title>
      <link>https://it-boyer.github.io/post/old/ios/ui/storyboard%E4%B9%8Bsegue/</link>
      <pubDate>Tue, 22 Jul 2014 10:59:49 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/ios/ui/storyboard%E4%B9%8Bsegue/</guid>
      <description>&lt;h5 id=&#34;segue原理&#34;&gt;Segue原理:&lt;/h5&gt;
&lt;p&gt;在iOS开发中，segue用来实现storyboard中源视图控制器和目标视图控制器连接，当segue被触发时，系统将完成下列操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实例化目标视图控制器&lt;/li&gt;
&lt;li&gt;实例化一个新segue对象，该对象持有所有的信息&lt;/li&gt;
&lt;li&gt;调用源视图控制器的prepareForSegue:sender:方法，&lt;/li&gt;
&lt;li&gt;调用segue的 perform 方法将目标控制器带到屏幕上。&lt;br&gt;
这个动作行为依赖segue的类型如modal,push,custom,modal segue告诉源视图控制器present目标视图控制器。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在源视图控制器的prepareForSegue:sender:的方法中，执行对目标视图控制器所有必要的属性配置，包括委托设置（如目标视图控制器有协议）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS Document Interaction 编程指南</title>
      <link>https://it-boyer.github.io/post/old/ios/iosdocumentinteraction%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97/</link>
      <pubDate>Tue, 01 Jul 2014 23:12:01 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/ios/iosdocumentinteraction%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97/</guid>
      <description>&lt;h4 id=&#34;关于-document-interaction&#34;&gt;关于 Document Interaction&lt;/h4&gt;
&lt;p&gt;iOS支持在你的app中通过调用其他app来预览和显示文档。iOS还支持文件关联，允许其他app调用你的app打开文件。这些技术包括了UIKit中提供的&lt;a href=&#34;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDocumentInteractionController_class/Reference/Reference.html&#34;&gt;UIDocumentInteractionController&lt;/a&gt;类，以及&lt;a href=&#34;https://developer.apple.com/library/ios/documentation/QuickLook/Reference/QuickLookFrameworkReference_iPhoneOS/_index.html&#34;&gt;Quick Look&lt;/a&gt;框架。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;######预览文档和呈现选项菜单&lt;br&gt;
如果app需要打开自身并不支持的文件时，就需要使用&lt;strong&gt;UIDocumentInteractionController&lt;/strong&gt;。一个&lt;strong&gt;document interaction controller&lt;/strong&gt;通过&lt;strong&gt;Quick Look框架&lt;/strong&gt;判断文档是否能被另一个app打开和预览。也就是说，app可以通过&lt;strong&gt;documentinteraction controller&lt;/strong&gt;提供一些支持打开该文件方式的菜单。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体实现需要以下步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;需要通过其他APP打开的文件，来实例化&lt;code&gt;UIDocumentInteractionController&lt;/code&gt;实例对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;在自己的APP UI中提供一个代表这种文件的图像标（一般显示文件名或者图标）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;用户交互，如触摸这个控件，则调用&lt;code&gt;documentinteractioncontroller&lt;/code&gt;对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三种交互界面:
1. 预览文件的内容。
2. 一个包含预览和打开操作的菜单。可以通过实现某些委托方法，向菜单中加入其他操作，比如复制、打印。
3. 一个菜单，仅包含“以其它方式打开”操作。&lt;/p&gt;
&lt;p&gt;同时，&lt;code&gt;documentinteractioncontroller&lt;/code&gt;内置了一些手势，必要时可以直接实现它们。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;######使用&lt;code&gt;documentinteractioncontroller&lt;/code&gt;的场景:&lt;strong&gt;与文件交互的app都可以使用。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;需要从网络下载文件的APP:&lt;br&gt;
例如，email程序需要打开和预览邮件附件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;不下载文件的APP:&lt;br&gt;
例如，APP需要支持文件共享（参考“File-Sharing Support” in &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/Miscellaneous/Conceptual/iPhoneOSTechOverview/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007898&#34;&gt;iOS Technology Overview&lt;/a&gt;), 即可以对同步到app Documents/Shared目录下的文件使用&lt;code&gt;documentinteractioncontroller&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>UIDevice类介绍</title>
      <link>https://it-boyer.github.io/post/old/ios/uidevice%E7%B1%BB%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Tue, 17 Jun 2014 15:12:53 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/ios/uidevice%E7%B1%BB%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;h3 id=&#34;uideviceh&#34;&gt;UIDevice.h&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;&lt;span class=&#34;p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UIDevice&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;currentDevice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 		  &lt;span class=&#34;c1&#34;&gt;// 获取当前设备
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;NSString&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;               	  &lt;span class=&#34;c1&#34;&gt;// e.g. &amp;#34;My iPhone&amp;#34;  
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NSString&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;              	  &lt;span class=&#34;c1&#34;&gt;// e.g. @&amp;#34;iPhone&amp;#34;, @&amp;#34;iPod touch&amp;#34;  
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NSString&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;localizedModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;     	  &lt;span class=&#34;c1&#34;&gt;// localized version of model  
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NSString&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;systemName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;     		  &lt;span class=&#34;c1&#34;&gt;// e.g. @&amp;#34;iOS&amp;#34;  
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NSString&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;systemVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   	  &lt;span class=&#34;c1&#34;&gt;// e.g. @&amp;#34;4.0&amp;#34;  
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UIDeviceOrientation&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orientation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//除非正在生成设备方向的通知，否则返回UIDeviceOrientationUnknown  
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NSUUID&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;identifierForVendor&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;//可用于唯一标识该设备，同一供应商不同应用具有相同的UUID
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;    &lt;span class=&#34;n&#34;&gt;UIDeviceOrientationUnknown&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;UIDeviceOrientationPortrait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;                    &lt;span class=&#34;c1&#34;&gt;// 竖向，头向上
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;UIDeviceOrientationPortraitUpsideDown&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  		&lt;span class=&#34;c1&#34;&gt;// 竖向，头向下
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;UIDeviceOrientationLandscapeLeft&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;         		&lt;span class=&#34;c1&#34;&gt;// 横向，头向左
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;UIDeviceOrientationLandscapeRight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;       		&lt;span class=&#34;c1&#34;&gt;// 横向，头向右
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;UIDeviceOrientationFaceUp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;                  	&lt;span class=&#34;c1&#34;&gt;// 平放，屏幕朝下
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;UIDeviceOrientationFaceDown&lt;/span&gt;                	 &lt;span class=&#34;c1&#34;&gt;// 平放，屏幕朝下
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;//使用内置的宏定义的函数，根据&lt;strong&gt;orientation&lt;/strong&gt;判断设备方向,返回值类型&lt;strong&gt;BOOL&lt;/strong&gt;.&lt;br&gt;
{%codeblock lang:java 纵向宏定义,返回YES:纵向%}
#define UIDeviceOrientationIsPortrait(orientation)  ((orientation) == UIDeviceOrientationPortrait || (orientation) == UIDeviceOrientationPortraitUpsideDown)
{%endcodeblock %}
{%codeblock lang:java 横向宏定义,返回YES:横向%}
#define UIDeviceOrientationIsLandscape(orientation) ((orientation) == UIDeviceOrientationLandscapeLeft || (orientation) == UIDeviceOrientationLandscapeRight)
{%endcodeblock%}&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IOS7新宠TextKit</title>
      <link>https://it-boyer.github.io/post/old/ios/ui/ios7%E6%96%B0%E5%AE%A0textkit/</link>
      <pubDate>Mon, 16 Jun 2014 22:24:48 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/ios/ui/ios7%E6%96%B0%E5%AE%A0textkit/</guid>
      <description>&lt;h2 id=&#34;text-kit&#34;&gt;Text Kit&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Text Kit&lt;/code&gt;&lt;/strong&gt;：是个庞大的framework，继承了&lt;code&gt;Core Text&lt;/code&gt;的全部功能，构建了快速、先进的文本排版和渲染引擎，更让开发者们高兴的是，设计者把它封装在了一个面向对象的API中。并且与UIKit框架很好的集成，它让程序能够通过&lt;strong&gt;NSTextStorage&lt;/strong&gt;对象存储文本排版和显示文本等主要信息，并支持排版所需要的所有特性，包括字距调整、连写、换行和对齐等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;更直观的理解，&lt;strong&gt;UITextView&lt;/strong&gt;，&lt;strong&gt;UITextField&lt;/strong&gt;、&lt;strong&gt;UILabel&lt;/strong&gt;等UIKit控件都已经基于&lt;strong&gt;Text Kit&lt;/strong&gt;重新构建，是为UIKit框架提供高质量排版服务而扩展的一些类和协议.&lt;br&gt;
例如：NSTextStorage对象，它本身是&lt;strong&gt;NSMutableAttributedString&lt;/strong&gt;的子类，支持分批编辑，这就意味着在改变一个范围内的字符样式时，不用整体替换文本内容，就能完成排版效果。其中支持分页文本、文本包装、富文本编辑、交互式文本着色、文本折叠和自定义截取等特性。&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;IOS6之前，想实现一些丰富的文本排版，例如在textView中显示不同样式的文本，或者图片和文字混排等，就需要借助于UIWebView或者深入研究一下&lt;code&gt;Core Text&lt;/code&gt;。后来iOS6，增加一个很棒的属性:&lt;code&gt;NSAttributedString&lt;/code&gt;，主要用于支持UILabel、UITextField、UITextView等UIKit控件自主排版的功能。很显然，IOS7并没有满足于这一改进，同时推出一款功能更为齐全，易用的&lt;code&gt;Text Kit&lt;/code&gt;新宠。&lt;br&gt;
在iOS 6中, 用于文本的UIKit控件是基于WebKit和Core Graphics的字符串绘制方法来实现的。如下面层级体系图所示：&lt;br&gt;
iOS 7的整体构架要更清晰，所有基于文本的UIKit控件（除了UIWebView）现在都可以使用Text Kit，如下图所示：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IOS7的变革</title>
      <link>https://it-boyer.github.io/post/old/ios/ios7%E7%9A%84%E5%8F%98%E9%9D%A9/</link>
      <pubDate>Wed, 11 Jun 2014 10:17:19 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/ios/ios7%E7%9A%84%E5%8F%98%E9%9D%A9/</guid>
      <description>性能提高以及被遗弃的功能 新增截屏通知:UIApplicationUserDidTakeScreenshotNotification 在IOS 7</description>
    </item>
    
  </channel>
</rss>
