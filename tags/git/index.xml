<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on 习七</title>
    <link>https://it-boyer.github.io/tags/git/</link>
    <description>Recent content in git on 习七</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 12 Oct 2018 19:56:59 +0000</lastBuildDate><atom:link href="https://it-boyer.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>brew升级git版本</title>
      <link>https://it-boyer.github.io/post/old/git/brew%E5%8D%87%E7%BA%A7git%E7%89%88%E6%9C%AC/</link>
      <pubDate>Fri, 12 Oct 2018 19:56:59 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/git/brew%E5%8D%87%E7%BA%A7git%E7%89%88%E6%9C%AC/</guid>
      <description>1 2 3 4 $ brew doctor $ brew install git $ brew link --overwrite git Linking /usr/local/Cellar/git/2.19.1... 216 symlinks created</description>
    </item>
    
    <item>
      <title>git-lfs命令工具使用</title>
      <link>https://it-boyer.github.io/post/old/git/git-lfs%E5%91%BD%E4%BB%A4%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 11 Oct 2018 17:58:15 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/git/git-lfs%E5%91%BD%E4%BB%A4%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</guid>
      <description>{% github git-lfs git-lfs 45c4568 width = 30% %} git-lfs官网 LFS其实是git的一个扩展，并没有改变git的工作方式，有点像耍了个小花招，把指定需要lfs管理的文件</description>
    </item>
    
    <item>
      <title>gist命令工具使用</title>
      <link>https://it-boyer.github.io/post/old/git/gist%E5%91%BD%E4%BB%A4%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 11 Oct 2018 17:17:52 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/git/gist%E5%91%BD%E4%BB%A4%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</guid>
      <description>{% github defunkt gist 8d86604 width = 30% %} 按照gist 安装gist 1 brew install gist 创建gist 上传a.rb中的代码段： 1 gist a.rb 上传多个文件a.rb,b.rb,c.rb的代码段</description>
    </item>
    
    <item>
      <title>subtree拆分大的git库到多个独立git库</title>
      <link>https://it-boyer.github.io/post/old/git/subtree%E6%8B%86%E5%88%86%E5%A4%A7%E7%9A%84git%E5%BA%93%E5%88%B0%E5%A4%9A%E4%B8%AA%E7%8B%AC%E7%AB%8Bgit%E5%BA%93/</link>
      <pubDate>Tue, 09 Oct 2018 12:07:55 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/git/subtree%E6%8B%86%E5%88%86%E5%A4%A7%E7%9A%84git%E5%BA%93%E5%88%B0%E5%A4%9A%E4%B8%AA%E7%8B%AC%E7%AB%8Bgit%E5%BA%93/</guid>
      <description>Git 仓库拆拆拆 拆分一个子目录为独立仓库 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 这就是那个大仓库 big-project $ git clone git@github.com:tom/big-project.git $ cd big-project # 把所有 `codes-eiyo` 目录下的相关提交整理为一个新的分</description>
    </item>
    
    <item>
      <title>git-log的使用</title>
      <link>https://it-boyer.github.io/post/old/git/git-log%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 05 Sep 2018 15:52:33 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/git/git-log%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>trello 卡片 查看提交历史 来看一个实际的例子，如果要查看 Git 仓库中，2008 年 10 月期间，Junio Hamano 提交的但未合并的测试脚本（位于项目的 t/ 目录下的文件</description>
    </item>
    
    <item>
      <title>使用tag管理多个相关组件的版本发布</title>
      <link>https://it-boyer.github.io/post/old/git/%E4%BD%BF%E7%94%A8tag%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AA%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link>
      <pubDate>Wed, 20 Jun 2018 17:22:37 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/git/%E4%BD%BF%E7%94%A8tag%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AA%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid>
      <description>tag标签自增新建脚本 1 2 3 4 5 6 #!/bin/sh tag=$(git describe --tags `git rev-list --tags --max-count=1`) version=${tag##*.} let &amp;#34;version+=1&amp;#34; newTag=${tag%.*}.${version} echo &amp;#39;Create New Tag &amp;#39;$newTag 修改tag版本号的方法 方法一：覆盖 已有v1.0.2.8要覆盖该版本 1 git tag</description>
    </item>
    
    <item>
      <title>Git如何永久删除文件(包括历史记录)</title>
      <link>https://it-boyer.github.io/post/old/git/git%E5%A6%82%E4%BD%95%E6%B0%B8%E4%B9%85%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%8C%85%E6%8B%AC%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 11 Jun 2018 20:32:02 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/git/git%E5%A6%82%E4%BD%95%E6%B0%B8%E4%B9%85%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%8C%85%E6%8B%AC%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/</guid>
      <description>有些时候不小心上传了一些敏感文件(例如密码), 或者不想上传的文件(没及时或忘了加到.gitignore里的), 而且上传的文件又特别大的时候,</description>
    </item>
    
    <item>
      <title>Git工具交互式暂存</title>
      <link>https://it-boyer.github.io/post/old/git/git%E5%B7%A5%E5%85%B7%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%9A%82%E5%AD%98/</link>
      <pubDate>Thu, 12 Apr 2018 19:41:46 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/git/git%E5%B7%A5%E5%85%B7%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%9A%82%E5%AD%98/</guid>
      <description>交互式暂存 Git 自带的一些脚本可以使在命令行下工作更容易。 本节的几个互交命令可以帮助你将文件的特定部分组合成提交。 当你修改一组文件后，希望这些改</description>
    </item>
    
    <item>
      <title>当项目过大需要通过SSH方式Clone</title>
      <link>https://it-boyer.github.io/post/old/git/%E5%BD%93%E9%A1%B9%E7%9B%AE%E8%BF%87%E5%A4%A7%E9%9C%80%E8%A6%81%E9%80%9A%E8%BF%87ssh%E6%96%B9%E5%BC%8Fclone/</link>
      <pubDate>Wed, 04 Apr 2018 17:44:24 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/git/%E5%BD%93%E9%A1%B9%E7%9B%AE%E8%BF%87%E5%A4%A7%E9%9C%80%E8%A6%81%E9%80%9A%E8%BF%87ssh%E6%96%B9%E5%BC%8Fclone/</guid>
      <description>设置全局提交信息 1 2 git config --global user.email &amp;#34;you@example.com&amp;#34; git config --global user.name &amp;#34;Your Name&amp;#34; 修改最后一次提交的用户名信息 ``git git config user.name &amp;lsquo;wangz&amp;rsquo; git config user.email &amp;lsquo;wangz@alib.com&amp;rsquo; git commit &amp;ndash;amend &amp;ndash;author=wangz 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ### 项目过大问题</description>
    </item>
    
    <item>
      <title>SubModule与SubTree的差异</title>
      <link>https://it-boyer.github.io/post/old/git/submodule%E4%B8%8Esubtree%E7%9A%84%E5%B7%AE%E5%BC%82/</link>
      <pubDate>Wed, 17 May 2017 11:23:22 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/git/submodule%E4%B8%8Esubtree%E7%9A%84%E5%B7%AE%E5%BC%82/</guid>
      <description>核心区别 git submodule类似于引用，而git subtree类似于拷贝，比如你在一篇博客中想用到你另一篇博客的内容，git submodul</description>
    </item>
    
    <item>
      <title>用Git将代码恢复到一个历史的版本</title>
      <link>https://it-boyer.github.io/post/old/git/%E7%94%A8git%E5%B0%86%E4%BB%A3%E7%A0%81%E6%81%A2%E5%A4%8D%E5%88%B0%E4%B8%80%E4%B8%AA%E5%8E%86%E5%8F%B2%E7%9A%84%E7%89%88%E6%9C%AC/</link>
      <pubDate>Fri, 10 Feb 2017 18:19:48 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/git/%E7%94%A8git%E5%B0%86%E4%BB%A3%E7%A0%81%E6%81%A2%E5%A4%8D%E5%88%B0%E4%B8%80%E4%B8%AA%E5%8E%86%E5%8F%B2%E7%9A%84%E7%89%88%E6%9C%AC/</guid>
      <description>经历：将代码全提交到默认的head分支中，切换分支后，无法找到分支的严重后果： 目的：在当前分支上，将代码恢复到一个历史的提交版本上。 暴力的方</description>
    </item>
    
    <item>
      <title>迁移SVN库到git库保留branchs和tags</title>
      <link>https://it-boyer.github.io/post/old/git/%E8%BF%81%E7%A7%BBsvn%E5%BA%93%E5%88%B0git%E5%BA%93%E4%BF%9D%E7%95%99branchs%E5%92%8Ctags/</link>
      <pubDate>Wed, 18 Jan 2017 12:21:46 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/git/%E8%BF%81%E7%A7%BBsvn%E5%BA%93%E5%88%B0git%E5%BA%93%E4%BF%9D%E7%95%99branchs%E5%92%8Ctags/</guid>
      <description>SVN was a great advance in its day, but it’s now clear that distributed version control systems are the way forward and that Git is the de facto standard. Having helped many clients migrate from SVN to Git, here are my notes for a pain-free transition that will preserve the tags and branches in your SVN repository. 首先导入一个本地存储</description>
    </item>
    
    <item>
      <title>git svn桥接命令的基础</title>
      <link>https://it-boyer.github.io/post/old/git/gitsvn%E6%A1%A5%E6%8E%A5%E5%91%BD%E4%BB%A4%E7%9A%84%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Tue, 05 Jan 2016 14:18:00 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/git/gitsvn%E6%A1%A5%E6%8E%A5%E5%91%BD%E4%BB%A4%E7%9A%84%E5%9F%BA%E7%A1%80/</guid>
      <description>git svn 通过几个简单的工作流程了解到git svn常见命令： 值得警戒的是，在使用 git svn 的时候，你实际是在与 Subversion 交互，Git 比它要高级复杂的多。尽管可以</description>
    </item>
    
    <item>
      <title>使用SmartSVN创建版本库</title>
      <link>https://it-boyer.github.io/post/old/git/%E4%BD%BF%E7%94%A8smartsvn%E5%88%9B%E5%BB%BA%E7%89%88%E6%9C%AC%E5%BA%93/</link>
      <pubDate>Mon, 05 Oct 2015 19:16:47 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/git/%E4%BD%BF%E7%94%A8smartsvn%E5%88%9B%E5%BB%BA%E7%89%88%E6%9C%AC%E5%BA%93/</guid>
      <description>&lt;p&gt;SmartSVN有以下版本：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SmartSVN enterprise 9 企业版&lt;/li&gt;
&lt;li&gt;SmartSVN foundation 8 基础版&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于企业版只能建立本地的版本库，无法创建&amp;amp;使用svn://localhost方式。&lt;/p&gt;
&lt;h4 id=&#34;用基础版来说明创建版本库&#34;&gt;用基础版来说明创建版本库。&lt;/h4&gt;
&lt;p&gt;参考：&lt;a href=&#34;http://hammadk.com/how-to-create-repository-in-smartsvn-tutorial/&#34;&gt;Create Repository in SmartSVN – Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;启动SmartSVN SmartSVN foundation 8 基础版&lt;/li&gt;
&lt;li&gt;菜单栏Project-&amp;gt; set up Local Repository&amp;hellip;   &lt;br&gt;
需要设置如下两个参数：&lt;br&gt;
3. svnadmin 在终端执行： whereis svnadmin&lt;br&gt;
4. svnserve 在终端执行： whereis svnserve&lt;br&gt;
￼&lt;img src=&#34;https://app.yinxiang.com/shard/s33/nl/2147483647/59a78b5d-81de-48f1-afe9-2fb2bde72da2//res/adeb039a-b429-481a-ac25-2044b871e45e/screenshot.png?resizeSmall&amp;amp;width=832&#34; alt=&#34;image&#34;&gt;&lt;/li&gt;
&lt;li&gt;指定版本库的目录位置：&lt;br&gt;
&lt;img src=&#34;https://app.yinxiang.com/shard/s33/nl/2147483647/59a78b5d-81de-48f1-afe9-2fb2bde72da2//res/a3f00903-101c-4848-a10a-3479643baea7/screenshot.png?resizeSmall&amp;amp;width=832&#34; alt=&#34;image&#34;&gt;&lt;/li&gt;
&lt;li&gt;初始化账户密码：&lt;br&gt;
&lt;img src=&#34;https://app.yinxiang.com/shard/s33/nl/2147483647/59a78b5d-81de-48f1-afe9-2fb2bde72da2//res/140f257e-e452-47ea-8317-34a5ed8d6c7f/screenshot.png?resizeSmall&amp;amp;width=832&#34; alt=&#34;image&#34;&gt;&lt;/li&gt;
&lt;li&gt;完成。&lt;br&gt;
&lt;img src=&#34;https://app.yinxiang.com/shard/s33/nl/2147483647/59a78b5d-81de-48f1-afe9-2fb2bde72da2//res/ed975623-72bb-4132-8d04-ac9a7b1d2fc9/screenshot.png?resizeSmall&amp;amp;width=832&#34; alt=&#34;image&#34;&gt;&lt;br&gt;
&lt;img src=&#34;https://app.yinxiang.com/shard/s33/nl/2147483647/59a78b5d-81de-48f1-afe9-2fb2bde72da2//res/53306789-9d97-485c-a54d-a143e7b078f1/screenshot.png?resizeSmall&amp;amp;width=832&#34; alt=&#34;image&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Mac安装gitLab服务器</title>
      <link>https://it-boyer.github.io/post/old/git/mac%E5%AE%89%E8%A3%85gitlab%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Sun, 27 Sep 2015 19:25:38 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/git/mac%E5%AE%89%E8%A3%85gitlab%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>必要配置 *创建一个名称为&amp;quot;gitlab&amp;quot;管理员用户，然后再创建一个名称为&amp;quot;gitlab&amp;quot;的群组 *开启</description>
    </item>
    
    <item>
      <title>Git中的储藏工具stash</title>
      <link>https://it-boyer.github.io/post/old/git/git%E4%B8%AD%E7%9A%84%E5%82%A8%E8%97%8F%E5%B7%A5%E5%85%B7stash/</link>
      <pubDate>Mon, 19 Jan 2015 19:57:04 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/git/git%E4%B8%AD%E7%9A%84%E5%82%A8%E8%97%8F%E5%B7%A5%E5%85%B7stash/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;Stashing&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;储藏工作&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;应用储藏&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;被暂存的文件重新暂存&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;应用后，移除储藏的内容&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;取消储藏(Un-applying a Stash)&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;新建stash-unapply别名&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;从储藏中创建分支&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;a-namestashinggit工具---储藏stashingagit&#34;&gt;&lt;!-- raw HTML omitted --&gt;Git工具 - 储藏（Stashing）&lt;!-- raw HTML omitted --&gt;git&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%82%A8%E8%97%8F%E4%B8%8E%E6%B8%85%E7%90%86&#34;&gt;原文&lt;/a&gt;
场景：当项目中某一部分正在编码中，突然接到新任务，又必须换至其他分支去完成。&lt;/p&gt;
&lt;p&gt;问题：你不想提交进行了一半的工作，否则以后你无法回到这个工作点。&lt;/p&gt;
&lt;p&gt;解决：**&lt;!-- raw HTML omitted --&gt;git stash &lt;!-- raw HTML omitted --&gt;**命令。&lt;/p&gt;
&lt;p&gt;“Stashing”可以获取工作目录的中间状态，即：将修改过的被追踪的文件和暂存的变更，保存到一个未完结变更的堆栈中，随时可以重新应用。&lt;/p&gt;
&lt;h3 id=&#34;a-namework储藏工作a&#34;&gt;&lt;!-- raw HTML omitted --&gt;储藏工作&lt;!-- raw HTML omitted --&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;进入项目目录，修改某个文件，有可能还暂存其中的一个变更。&lt;/li&gt;
&lt;li&gt;**&lt;!-- raw HTML omitted --&gt;git status &lt;!-- raw HTML omitted --&gt;**命令,查看中间状态：
{%codeblock lang:bash %}
$ git status&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;on-branch-master&#34;&gt;On branch master&lt;/h1&gt;
&lt;h1 id=&#34;changes-to-be-committed&#34;&gt;Changes to be committed:&lt;/h1&gt;
&lt;h1 id=&#34;use-git-reset-head-file-to-unstage&#34;&gt;(use &amp;ldquo;git reset HEAD &lt;!-- raw HTML omitted --&gt;&amp;hellip;&amp;rdquo; to unstage)&lt;/h1&gt;
&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;h1 id=&#34;modified---indexhtml&#34;&gt;modified:   index.html&lt;/h1&gt;
&lt;h1 id=&#34;heading-1&#34;&gt;&lt;/h1&gt;
&lt;h1 id=&#34;changes-not-staged-for-commit&#34;&gt;Changes not staged for commit:&lt;/h1&gt;
&lt;h1 id=&#34;use-git-add-file-to-update-what-will-be-committed&#34;&gt;(use &amp;ldquo;git add &lt;!-- raw HTML omitted --&gt;&amp;hellip;&amp;rdquo; to update what will be committed)&lt;/h1&gt;
&lt;h1 id=&#34;heading-2&#34;&gt;&lt;/h1&gt;
&lt;h1 id=&#34;modified---libsimplegitrb&#34;&gt;modified:   lib/simplegit.rb&lt;/h1&gt;
&lt;h1 id=&#34;heading-3&#34;&gt;&lt;/h1&gt;
&lt;p&gt;{%endcodeblock%}
3. 切换分支，但不提交step 1 中的变更，所以储藏这些变更。
执行**&lt;!-- raw HTML omitted --&gt;git stash &lt;!-- raw HTML omitted --&gt;**命令，往堆栈中推送一个新的储藏：
{%codeblock lang:bash %}
$ git stash
Saved working directory and index state&lt;br&gt;
&amp;ldquo;WIP on master: 049d078 added the index file&amp;rdquo;
HEAD is now at 049d078 added the index file
(To restore them type &amp;ldquo;git stash apply&amp;rdquo;)
{%endcodeblock%}
4. 执行step 2查看目录库，中间状态就不见了：
{%codeblock lang:bash %}
$ git status
#######On branch master
nothing to commit, working directory clean
{%endcodeblock%}
这时，你可以方便地切换到其他分支工作；你的变更都保存在栈上。
5. 使用**&lt;!-- raw HTML omitted --&gt;git stash list&lt;!-- raw HTML omitted --&gt;**要查看现有的储藏：
{%codeblock lang:bash%}
$ git stash list
stash@{0}: WIP on master: 049d078 added the index file
stash@{1}: WIP on master: c264051 Revert &amp;ldquo;added file_size&amp;rdquo;
stash@{2}: WIP on master: 21d80a5 added number to log
{%endcodeblock%}
在这个案例中，之前已经进行了两次储藏，所以你可以访问到三个不同的储藏。&lt;/p&gt;
&lt;h3 id=&#34;a-nameapply应用储藏a&#34;&gt;&lt;!-- raw HTML omitted --&gt;应用储藏&lt;!-- raw HTML omitted --&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;执行**&lt;!-- raw HTML omitted --&gt;git stash apply&lt;!-- raw HTML omitted --&gt;**命令, 可以重新应用最近的一次储藏；
执行**&lt;!-- raw HTML omitted --&gt;git stash apply stash@{2}&lt;!-- raw HTML omitted --&gt;**命令，即通过指定储藏的名字，来应用更早的储藏。
{%codeblock lang:bash%}
$ git stash apply&lt;/p&gt;
&lt;h1 id=&#34;on-branch-master-1&#34;&gt;On branch master&lt;/h1&gt;
&lt;h1 id=&#34;changes-not-staged-for-commit-1&#34;&gt;Changes not staged for commit:&lt;/h1&gt;
&lt;h1 id=&#34;use-git-add-file-to-update-what-will-be-committed-1&#34;&gt;(use &amp;ldquo;git add &lt;!-- raw HTML omitted --&gt;&amp;hellip;&amp;rdquo; to update what will be committed)&lt;/h1&gt;
&lt;h1 id=&#34;heading-4&#34;&gt;&lt;/h1&gt;
&lt;h1 id=&#34;modified---indexhtml-1&#34;&gt;modified:   index.html&lt;/h1&gt;
&lt;h1 id=&#34;modified---libsimplegitrb-1&#34;&gt;modified:   lib/simplegit.rb&lt;/h1&gt;
&lt;h1 id=&#34;heading-5&#34;&gt;&lt;/h1&gt;
&lt;p&gt;{%endcodeblock%}&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
