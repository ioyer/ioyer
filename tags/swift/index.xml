<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>swift on 习七</title>
    <link>https://it-boyer.github.io/tags/swift/</link>
    <description>Recent content in swift on 习七</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 13 Sep 2020 22:40:23 +0800</lastBuildDate><atom:link href="https://it-boyer.github.io/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>swift 的 doom 环境</title>
      <link>https://it-boyer.github.io/post/old/swift-%E5%9C%A8-doom-%E4%B8%AD%E7%9A%84%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Sun, 13 Sep 2020 22:40:23 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift-%E5%9C%A8-doom-%E4%B8%AD%E7%9A%84%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/</guid>
      <description>安装 swift-mode swift 自动补齐相关插件 swift-mode State &amp;ldquo;DONE&amp;rdquo; from &amp;ldquo;DELEGATED&amp;rdquo; [2019-12-11 三 09:30][终端支持 swift 自动补齐](post/shell/终端支持 swift 自动补齐) flycheck-swift nathankot/company-sourcekit swift-emacs/swift-mode 创建可执行项目 spi &amp;ndash;type</description>
    </item>
    
    <item>
      <title>创建单个 swift 可执行文件</title>
      <link>https://it-boyer.github.io/post/old/swift-%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 13 Sep 2020 22:33:34 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift-%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>xcrun/swift 命令工具 第一种 vi test.swift #!/usr/bin/env xcrun swift print(&amp;ldquo;hello&amp;rdquo;) $ chmod 755 test.swift $ ./test.swift 第二种 $ cat &amp;laquo;EOF &amp;gt; script #!/usr/bin/swift print(&amp;ldquo;Hi!&amp;quot;) EOF $ chmod u+x script $ ./script Hi! swift-sh 支持库依赖 安装命令 brew install swift-sh 使用 $ cat &amp;laquo;EOF &amp;gt; script #!/usr/bin/swift sh import PromiseKit // @mxcl ~&amp;gt; 6.5 print(Promise.value(&amp;ldquo;Hi!&amp;quot;)) EOF $ chmod</description>
    </item>
    
    <item>
      <title>Guaka快速创建swift命令行CLI的工具</title>
      <link>https://it-boyer.github.io/post/old/macos/guaka%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BAswift%E5%91%BD%E4%BB%A4%E8%A1%8Ccli%E7%9A%84%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Sun, 18 Nov 2018 19:10:49 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/macos/guaka%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BAswift%E5%91%BD%E4%BB%A4%E8%A1%8Ccli%E7%9A%84%E5%B7%A5%E5%85%B7/</guid>
      <description>{% github nsomar Guaka 7d6135f width = 30% %} Guaka介绍 通过 Guaka Framework 来实现 CLI(command-line interface)。 该框架可以快速实现如下的效果： 1 git checkout -v &amp;#34;url&amp;#34; git 就是一个 CLI，checko</description>
    </item>
    
    <item>
      <title>使用swift命令行抓取WWDC字幕</title>
      <link>https://it-boyer.github.io/post/old/macos/%E4%BD%BF%E7%94%A8swift%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8A%93%E5%8F%96wwdc%E5%AD%97%E5%B9%95/</link>
      <pubDate>Sun, 18 Nov 2018 19:10:49 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/macos/%E4%BD%BF%E7%94%A8swift%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8A%93%E5%8F%96wwdc%E5%AD%97%E5%B9%95/</guid>
      <description>{% github it-boyer WWDC-Subtitles 84878dc width = 30% %} 平时没有那么大段的时间能去看这些 session 的视频，想先通过字幕能了解到 session 中的内容，所以搜罗了网上大牛抓取WWDC字幕的相关实现。 原</description>
    </item>
    
    <item>
      <title>Swift的动态性</title>
      <link>https://it-boyer.github.io/post/old/swift/swift%E7%9A%84%E5%8A%A8%E6%80%81%E6%80%A7/</link>
      <pubDate>Sat, 10 Nov 2018 09:14:55 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/swift%E7%9A%84%E5%8A%A8%E6%80%81%E6%80%A7/</guid>
      <description>Foundation Foundation 框架实现了基于运行时一个特性的两个API： 键值编码 (key-value-coding, KVC) 键值观察 (key-value observing, KVO) KVC 和 KVO 允许我们将 UI 和数据进行绑定，这也是 Rx 以及其他响应式框架实现的基</description>
    </item>
    
    <item>
      <title>swift混编及Framework和静态库的支持</title>
      <link>https://it-boyer.github.io/post/old/swift/swift%E6%B7%B7%E7%BC%96%E5%8F%8Aframework%E5%92%8C%E9%9D%99%E6%80%81%E5%BA%93%E7%9A%84%E6%94%AF%E6%8C%81/</link>
      <pubDate>Wed, 31 Oct 2018 21:19:06 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/swift%E6%B7%B7%E7%BC%96%E5%8F%8Aframework%E5%92%8C%E9%9D%99%E6%80%81%E5%BA%93%E7%9A%84%E6%94%AF%E6%8C%81/</guid>
      <description>swift和OC混编 OC oc调用swift framework/swift静态库 oc静态库调用swift/oc的framework oc静态库调用</description>
    </item>
    
    <item>
      <title>将Playground作为项目的单元测试</title>
      <link>https://it-boyer.github.io/post/old/swift/%E5%B0%86playground%E4%BD%9C%E4%B8%BA%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Mon, 22 Oct 2018 16:52:33 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/%E5%B0%86playground%E4%BD%9C%E4%B8%BA%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <description>在Perfect项目中增加playground： 新建Perfect.xcodeproj和PerfectPlayground 新建一个Xcode</description>
    </item>
    
    <item>
      <title>Swift访问REST服务开发TrelloAPI</title>
      <link>https://it-boyer.github.io/post/old/macos/swift%E8%AE%BF%E9%97%AErest%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91trelloapi/</link>
      <pubDate>Mon, 22 Oct 2018 08:30:26 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/macos/swift%E8%AE%BF%E9%97%AErest%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91trelloapi/</guid>
      <description></description>
    </item>
    
    <item>
      <title>使用swift开发自己的命令行工具</title>
      <link>https://it-boyer.github.io/post/old/swift/%E4%BD%BF%E7%94%A8swift%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Mon, 15 Oct 2018 19:30:26 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/%E4%BD%BF%E7%94%A8swift%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid>
      <description>{% github it-boyer Panagram_Final 8023350 width = 30% %} Command Line Programs on macOS Tutorial swift编写命令行工具 更新7/21/17:macOS教程上的命令行程序已经更新为Xcode 9和Swift 4。</description>
    </item>
    
    <item>
      <title>Swift直接调用Python函数库</title>
      <link>https://it-boyer.github.io/post/old/swift/swift%E7%9B%B4%E6%8E%A5%E8%B0%83%E7%94%A8python%E5%87%BD%E6%95%B0%E5%BA%93/</link>
      <pubDate>Mon, 15 Oct 2018 17:22:37 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/swift%E7%9B%B4%E6%8E%A5%E8%B0%83%E7%94%A8python%E5%87%BD%E6%95%B0%E5%BA%93/</guid>
      <description>{% github PerfectlySoft Perfect-Python 63589be width = 30% %} Perfect - Python 本项目提供了在Swift服务器应用上直接引用Python 2.7函数库的简便方法。 本项目采用Swift Package Manager 软件包管理器</description>
    </item>
    
    <item>
      <title>Swift调用AppleScript脚本和Shell脚本</title>
      <link>https://it-boyer.github.io/post/old/swift/swift%E8%B0%83%E7%94%A8applescript%E8%84%9A%E6%9C%AC%E5%92%8Cshell%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Mon, 15 Oct 2018 17:22:37 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/swift%E8%B0%83%E7%94%A8applescript%E8%84%9A%E6%9C%AC%E5%92%8Cshell%E8%84%9A%E6%9C%AC/</guid>
      <description>当想让自己的app支持播放，但有没有足够的时间来开发自己的播放器，可以先考虑用mpv播放器来实现相关功能，这是AppleScript作为互通</description>
    </item>
    
    <item>
      <title>为Pod的库创建演示文件SwiftPlayground</title>
      <link>https://it-boyer.github.io/post/old/macos/%E4%B8%BApod%E7%9A%84%E5%BA%93%E5%88%9B%E5%BB%BA%E6%BC%94%E7%A4%BA%E6%96%87%E4%BB%B6swiftplayground/</link>
      <pubDate>Fri, 12 Oct 2018 19:56:59 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/macos/%E4%B8%BApod%E7%9A%84%E5%BA%93%E5%88%9B%E5%BB%BA%E6%BC%94%E7%A4%BA%E6%96%87%E4%BB%B6swiftplayground/</guid>
      <description>{% github asmallteapot cocoapods-playgrounds c54b492 width = 30% %} issues 62 在playground中优雅的使用Pod This Could Be Us But You Playing Generates a Swift Playground for any Pod. Installation $ gem install cocoapods-playgrounds Usage CocoaPods To generate a Playground for a specific Pod: 1 $ pod playgrounds Alamofire To generate a Playground for</description>
    </item>
    
    <item>
      <title>在playground中执行异步方法</title>
      <link>https://it-boyer.github.io/post/old/swift/%E5%9C%A8playground%E4%B8%AD%E6%89%A7%E8%A1%8C%E5%BC%82%E6%AD%A5%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 12 Oct 2018 19:56:59 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/%E5%9C%A8playground%E4%B8%AD%E6%89%A7%E8%A1%8C%E5%BC%82%E6%AD%A5%E6%96%B9%E6%B3%95/</guid>
      <description>PLAYGROUND 延时运行引入 Playground 的XCPlayground扩展包框架,其中就包括使 Playground 能延时执行的黑魔法，needsIndefiniteExecution(需</description>
    </item>
    
    <item>
      <title>SPM搭建Perfect模版服务器</title>
      <link>https://it-boyer.github.io/post/old/macos/spm%E6%90%AD%E5%BB%BAperfect%E6%A8%A1%E7%89%88%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Tue, 02 Oct 2018 11:13:35 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/macos/spm%E6%90%AD%E5%BB%BAperfect%E6%A8%A1%E7%89%88%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>Perfect简介 {% github PerfectlySoft Perfect 60e44e4 width = 30% %} 目前比较流行服务端框架主要有Vapor、Perfect、Kitura和Zewo，他们各有长短，本人这次主</description>
    </item>
    
    <item>
      <title>使用SPM管理依赖库</title>
      <link>https://it-boyer.github.io/post/old/swift/%E4%BD%BF%E7%94%A8spm%E7%AE%A1%E7%90%86%E4%BE%9D%E8%B5%96%E5%BA%93/</link>
      <pubDate>Mon, 01 Oct 2018 23:57:27 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/%E4%BD%BF%E7%94%A8spm%E7%AE%A1%E7%90%86%E4%BE%9D%E8%B5%96%E5%BA%93/</guid>
      <description>概念概述 Package Manager {% github it-boyer PerfectTemplate 20294e56 width = 30% %} Modules模块 在 Swift 中我们使用模块来管理代码，每个模块指定一个命名空间并强制指定模块外哪些部分的代码是可以被</description>
    </item>
    
    <item>
      <title>Swift单文件相关命令行工具</title>
      <link>https://it-boyer.github.io/post/old/swift/swift%E5%8D%95%E6%96%87%E4%BB%B6%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Mon, 01 Oct 2018 21:02:49 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/swift%E5%8D%95%E6%96%87%E4%BB%B6%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid>
      <description>直接用 swift 命令执行 xcrun swift可以直接将一个 .swift文件作为命令行工具的输入，这样里面的代码也会被自动地编译和执行。我们甚至还可以在 .swift 文件</description>
    </item>
    
    <item>
      <title>swift在终端使用LLDB调试</title>
      <link>https://it-boyer.github.io/post/old/swift/swift%E5%9C%A8%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8lldb%E8%B0%83%E8%AF%95/</link>
      <pubDate>Mon, 01 Oct 2018 21:02:49 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/swift%E5%9C%A8%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8lldb%E8%B0%83%E8%AF%95/</guid>
      <description>Using the LLDB Debugger 使用LLDB调试器一步一步地运行Swift程序，通过设置断点调试运行状态。 创建一个名Factorial.swift，定义了一个fac</description>
    </item>
    
    <item>
      <title>SPM相关命令工具</title>
      <link>https://it-boyer.github.io/post/old/swift/spm%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Mon, 01 Oct 2018 14:52:23 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/spm%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E5%B7%A5%E5%85%B7/</guid>
      <description>概念概述 getting-started {% github it-boyer PerfectTemplate 20294e56 width = 30% %} 使用Swift编译系统 Swift 编译系统为编译库、可执行文件和在不同工程之间共享代码提供了基本的约定。 swift 工具 swift package swift package generate-xcodeproj swift</description>
    </item>
    
    <item>
      <title>swift支持的正则（textKit）</title>
      <link>https://it-boyer.github.io/post/old/swift/swift%E6%94%AF%E6%8C%81%E7%9A%84%E6%AD%A3%E5%88%99textkit/</link>
      <pubDate>Wed, 05 Sep 2018 15:52:33 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/swift%E6%94%AF%E6%8C%81%E7%9A%84%E6%AD%A3%E5%88%99textkit/</guid>
      <description>正则表达式语法 iOS开发之详解正则表达式原文：NSRegularExpression Tutorial: Getting Started nshipster文章NSPredicate iOS</description>
    </item>
    
    <item>
      <title>playground运行慢问题解决办法</title>
      <link>https://it-boyer.github.io/post/old/swift/playground%E8%BF%90%E8%A1%8C%E6%85%A2%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link>
      <pubDate>Wed, 05 Sep 2018 11:46:05 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/playground%E8%BF%90%E8%A1%8C%E6%85%A2%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid>
      <description>在升级xcode之后，出现playground无法运行的情况，live view 不显示等问题。</description>
    </item>
    
    <item>
      <title>Framework实现使用swift开发</title>
      <link>https://it-boyer.github.io/post/old/swift/framework%E5%AE%9E%E7%8E%B0%E4%BD%BF%E7%94%A8swift%E5%BC%80%E5%8F%91/</link>
      <pubDate>Sat, 23 Jun 2018 16:41:58 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/framework%E5%AE%9E%E7%8E%B0%E4%BD%BF%E7%94%A8swift%E5%BC%80%E5%8F%91/</guid>
      <description>{% github it-boyer JHHomeAPP 813e4b width = 30% %} 在静态库组件中使用swift开发 基于静态库的开发，实现封装静态库/Framework并使用swiftOC混编开发 创建三个角</description>
    </item>
    
    <item>
      <title>Objective-C的运行时库</title>
      <link>https://it-boyer.github.io/post/old/swift/objective-c%E7%9A%84%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BA%93/</link>
      <pubDate>Mon, 25 Sep 2017 20:01:36 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/objective-c%E7%9A%84%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BA%93/</guid>
      <description>Objective-C 运行时 Objective-C 是一门基于运行时的编程语言，这意味着所有方法、变量、类之间的链接，都会推迟到应用实际运行的最后一刻才会建立。这将给开发人员极高的灵</description>
    </item>
    
    <item>
      <title>Perfect开发天气接口API</title>
      <link>https://it-boyer.github.io/post/old/macos/perfect%E5%BC%80%E5%8F%91%E5%A4%A9%E6%B0%94%E6%8E%A5%E5%8F%A3api/</link>
      <pubDate>Mon, 26 Jun 2017 17:01:24 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/macos/perfect%E5%BC%80%E5%8F%91%E5%A4%A9%E6%B0%94%E6%8E%A5%E5%8F%A3api/</guid>
      <description>Perfect介绍 Perfect提供一系列代表请求和响应的对象组件，并允许在服务器上增加管理句柄用于产生页面内容。 所有对象都是在服务器对象创</description>
    </item>
    
    <item>
      <title>使用JavaScript把JSON数据定义对象</title>
      <link>https://it-boyer.github.io/post/old/swift/%E4%BD%BF%E7%94%A8javascript%E6%8A%8Ajson%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sun, 12 Feb 2017 14:41:35 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/%E4%BD%BF%E7%94%A8javascript%E6%8A%8Ajson%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%E5%AF%B9%E8%B1%A1/</guid>
      <description>将JSON数据序列化为代码实例 定义一个继承自 JSExport 子协议 PersonJSExports 定义一个遵守PersonJSExports协议的Person数据模 使用 JavaScript 把JSON转为</description>
    </item>
    
    <item>
      <title>swift错误处理</title>
      <link>https://it-boyer.github.io/post/old/swift/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link>
      <pubDate>Wed, 11 Jan 2017 17:04:21 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid>
      <description>&lt;p&gt;Error handling is the process of responding to and recovering from error conditions in your program. Swift provides first-class support for throwing, catching, propagating, and manipulating recoverable errors at runtime.
Some operations aren’t guaranteed to always complete execution or produce a useful output. Optionals are used to represent the absence of a value, but when an operation fails, it’s often useful to understand what caused the failure, so that your code can respond accordingly.
As an example, consider the task of reading and processing data from a file on disk. There are a number of ways this task can fail, including the file not existing at the specified path, the file not having read permissions, or the file not being encoded in a compatible format. Distinguishing among these different situations allows a program to resolve some errors and to communicate to the user any errors it can’t resolve.
举例，在读取和处理磁盘上的一个文件的数据时，会有有许多方法失败，包括指定的文件路径找不到，没有文件的读取权限，或文件编码格式不兼容。在这些不同情况下，就可以让程序提示用户导致程序无法执行的具体原因。&lt;/p&gt;
&lt;h1 id=&#34;representing-and-throwing-errors&#34;&gt;Representing and Throwing Errors&lt;/h1&gt;
&lt;p&gt;In Swift, errors are represented by values of types that conform to the Error protocol. This empty protocol indicates that a type can be used for error handling.
在swift中，错误类型是遵循Error 协议。&lt;/p&gt;
&lt;p&gt;Swift enumerations are particularly well suited to modeling a group of related error conditions, with associated values allowing for additional information about the nature of an error to be communicated. For example, here’s how you might represent the error conditions of operating a vending machine inside a game:
swift枚举类型特别适合为一组错误条件建模，用来关联导致错误的真正原因的相关信息。例如：
一个在操作一台游戏机时的会出现的错误枚举类：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;VendingMachineError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;invalidSelection&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;insufficientFunds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;coinsNeeded&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;outOfStock&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Throwing an error lets you indicate that something unexpected happened and the normal flow of execution can’t continue. You use a throw statement to throw an error. For example, the following code throws an error to indicate that five additional coins are needed by the vending machine:
抛出错误说明游戏出现异常，导致其他操作无法进行。这是需要通过Throw语句来抛出这个错误。例如，以下代码抛出了一个错误表明需要five：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;VendingMachineError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;insufficientFunds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;coinsNeeded&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;handling-errors&#34;&gt;Handling Errors&lt;/h1&gt;
&lt;p&gt;When an error is thrown, some surrounding piece of code must be responsible for handling the error—for example, by correcting the problem, trying an alternative approach, or informing the user of the failure.
当错误抛出后，这段代码必须来处理这个错误。例如：通过纠正问题，尝试其他方式实现，或通知用户的失败。&lt;/p&gt;
&lt;p&gt;There are four ways to handle errors in Swift. You can propagate the error from a function to the code that calls that function, handle the error using a do-catch statement, handle the error as an optional value, or assert that the error will not occur. Each approach is described in a section below.
在swift中有四种处理错误机制:
1. 向调用方法中传递这个错误
2. 使用do-catch语句处理
3. 把错误设置为可选型
4.断言不会出现异常的情况下，使用try!禁止异常抛出&lt;/p&gt;
&lt;p&gt;When a function throws an error, it changes the flow of your program, so it’s important that you can quickly identify places in your code that can throw errors. To identify these places in your code, write the try keyword—or the try? or try! variation—before a piece of code that calls a function, method, or initializer that can throw an error. These keywords are described in the sections below.
当一个方法抛出错误时，会打断程序正常的工作流，必须快速定位到可能抛出错误的代码。可以使用关键字&lt;code&gt;try&lt;/code&gt; 要注意 &lt;code&gt;try?&lt;/code&gt;或&lt;code&gt;try!&lt;/code&gt;之间的差异。在调用一个函数，方法或者构造器之前，来抛出异常。&lt;/p&gt;
&lt;h2 id=&#34;propagating-errors-using-throwing-functions&#34;&gt;Propagating Errors Using Throwing Functions&lt;/h2&gt;
&lt;p&gt;To indicate that a function, method, or initializer can throw an error, you write the throws keyword in the function’s declaration after its parameters. A function marked with throws is called a throwing function. If the function specifies a return type, you write the throwskeyword before the return arrow (-&amp;gt;).
函数，方法或构造器都可以抛出异常，只需要在声明它们时添加关键字：&lt;code&gt;throws&lt;/code&gt;即可，这种方法被称为&lt;code&gt;throws&lt;/code&gt;函数，&lt;code&gt;throws&lt;/code&gt;关键字位置在参数之后，返回值(-&amp;gt;)之前&lt;/p&gt;
&lt;p&gt;A throwing function propagates errors that are thrown inside of it to the scope from which it’s called.
抛出函数会把错误抛给调用它的函数周期中去。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Swift 语言指南[转]</title>
      <link>https://it-boyer.github.io/post/old/swift/swiftguide/</link>
      <pubDate>Tue, 03 Jan 2017 17:05:20 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/swiftguide/</guid>
      <description>Swift 语言指南 @SwiftLanguage 更新于 2016-6-6，更新内容详见 Issue 55。往期更新回顾详见《收录周报》 这份指南汇集了 Swift 语言主流学习资源，并以开发者的视角整理编</description>
    </item>
    
    <item>
      <title>OC与swift相互调用</title>
      <link>https://it-boyer.github.io/post/old/swift/oc%E4%B8%8Eswift%E7%9B%B8%E4%BA%92%E8%B0%83%E7%94%A8/</link>
      <pubDate>Tue, 01 Dec 2015 11:42:18 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/oc%E4%B8%8Eswift%E7%9B%B8%E4%BA%92%E8%B0%83%E7%94%A8/</guid>
      <description>Swift中使用OC的类声明 &amp;ndash; 实现配置 桥接的头文件 方式一：自动添加桥接头文件 在一个全新的Swift，利用第一次新建提示的方式自动添加桥接头文</description>
    </item>
    
    <item>
      <title>Swift入门</title>
      <link>https://it-boyer.github.io/post/old/swift/swift%E5%85%A5%E9%97%A8/</link>
      <pubDate>Fri, 27 Nov 2015 17:18:21 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/swift%E5%85%A5%E9%97%A8/</guid>
      <description>苹果官方 中文版 背景 Apple基于已有的编译器、调试器、框架作为其基础架构。通过ARC(Automatic Reference Counting，自动引用计数)来</description>
    </item>
    
    <item>
      <title>[转]Swift最佳实践</title>
      <link>https://it-boyer.github.io/post/old/swift/%E8%BD%ACswift%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 29 Sep 2015 17:05:21 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/old/swift/%E8%BD%ACswift%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
      <description>[英文][SwiftCommunityBestPractices] [SwiftCommunityBestPractices]: https://github.com/schwa/Swift-Community-Best-Practices [SwiftCommunity]: http://swift-lang.schwa.io/ [swiftCaptureLists]: http://www.russbishop.net/swift-capture-lists [SwiftURL]: https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/index.html [驼峰命名法URL]: http://www.wikiwand.com/en/Studly_caps [匈牙利命名法URL]: http://www.wikiwand.com/en/Hungarian_notation 黄金法则</description>
    </item>
    
  </channel>
</rss>
